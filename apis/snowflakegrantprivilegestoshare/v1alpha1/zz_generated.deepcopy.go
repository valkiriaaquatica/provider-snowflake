//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivilegesToShare) DeepCopyInto(out *PrivilegesToShare) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivilegesToShare.
func (in *PrivilegesToShare) DeepCopy() *PrivilegesToShare {
	if in == nil {
		return nil
	}
	out := new(PrivilegesToShare)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivilegesToShare) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivilegesToShareInitParameters) DeepCopyInto(out *PrivilegesToShareInitParameters) {
	*out = *in
	if in.OnAllTablesInSchema != nil {
		in, out := &in.OnAllTablesInSchema, &out.OnAllTablesInSchema
		*out = new(string)
		**out = **in
	}
	if in.OnDatabase != nil {
		in, out := &in.OnDatabase, &out.OnDatabase
		*out = new(string)
		**out = **in
	}
	if in.OnFunction != nil {
		in, out := &in.OnFunction, &out.OnFunction
		*out = new(string)
		**out = **in
	}
	if in.OnSchema != nil {
		in, out := &in.OnSchema, &out.OnSchema
		*out = new(string)
		**out = **in
	}
	if in.OnTable != nil {
		in, out := &in.OnTable, &out.OnTable
		*out = new(string)
		**out = **in
	}
	if in.OnTag != nil {
		in, out := &in.OnTag, &out.OnTag
		*out = new(string)
		**out = **in
	}
	if in.OnView != nil {
		in, out := &in.OnView, &out.OnView
		*out = new(string)
		**out = **in
	}
	if in.Privileges != nil {
		in, out := &in.Privileges, &out.Privileges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ToShare != nil {
		in, out := &in.ToShare, &out.ToShare
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivilegesToShareInitParameters.
func (in *PrivilegesToShareInitParameters) DeepCopy() *PrivilegesToShareInitParameters {
	if in == nil {
		return nil
	}
	out := new(PrivilegesToShareInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivilegesToShareList) DeepCopyInto(out *PrivilegesToShareList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PrivilegesToShare, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivilegesToShareList.
func (in *PrivilegesToShareList) DeepCopy() *PrivilegesToShareList {
	if in == nil {
		return nil
	}
	out := new(PrivilegesToShareList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PrivilegesToShareList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivilegesToShareObservation) DeepCopyInto(out *PrivilegesToShareObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.OnAllTablesInSchema != nil {
		in, out := &in.OnAllTablesInSchema, &out.OnAllTablesInSchema
		*out = new(string)
		**out = **in
	}
	if in.OnDatabase != nil {
		in, out := &in.OnDatabase, &out.OnDatabase
		*out = new(string)
		**out = **in
	}
	if in.OnFunction != nil {
		in, out := &in.OnFunction, &out.OnFunction
		*out = new(string)
		**out = **in
	}
	if in.OnSchema != nil {
		in, out := &in.OnSchema, &out.OnSchema
		*out = new(string)
		**out = **in
	}
	if in.OnTable != nil {
		in, out := &in.OnTable, &out.OnTable
		*out = new(string)
		**out = **in
	}
	if in.OnTag != nil {
		in, out := &in.OnTag, &out.OnTag
		*out = new(string)
		**out = **in
	}
	if in.OnView != nil {
		in, out := &in.OnView, &out.OnView
		*out = new(string)
		**out = **in
	}
	if in.Privileges != nil {
		in, out := &in.Privileges, &out.Privileges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ToShare != nil {
		in, out := &in.ToShare, &out.ToShare
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivilegesToShareObservation.
func (in *PrivilegesToShareObservation) DeepCopy() *PrivilegesToShareObservation {
	if in == nil {
		return nil
	}
	out := new(PrivilegesToShareObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivilegesToShareParameters) DeepCopyInto(out *PrivilegesToShareParameters) {
	*out = *in
	if in.OnAllTablesInSchema != nil {
		in, out := &in.OnAllTablesInSchema, &out.OnAllTablesInSchema
		*out = new(string)
		**out = **in
	}
	if in.OnDatabase != nil {
		in, out := &in.OnDatabase, &out.OnDatabase
		*out = new(string)
		**out = **in
	}
	if in.OnFunction != nil {
		in, out := &in.OnFunction, &out.OnFunction
		*out = new(string)
		**out = **in
	}
	if in.OnSchema != nil {
		in, out := &in.OnSchema, &out.OnSchema
		*out = new(string)
		**out = **in
	}
	if in.OnTable != nil {
		in, out := &in.OnTable, &out.OnTable
		*out = new(string)
		**out = **in
	}
	if in.OnTag != nil {
		in, out := &in.OnTag, &out.OnTag
		*out = new(string)
		**out = **in
	}
	if in.OnView != nil {
		in, out := &in.OnView, &out.OnView
		*out = new(string)
		**out = **in
	}
	if in.Privileges != nil {
		in, out := &in.Privileges, &out.Privileges
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ToShare != nil {
		in, out := &in.ToShare, &out.ToShare
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivilegesToShareParameters.
func (in *PrivilegesToShareParameters) DeepCopy() *PrivilegesToShareParameters {
	if in == nil {
		return nil
	}
	out := new(PrivilegesToShareParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivilegesToShareSpec) DeepCopyInto(out *PrivilegesToShareSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivilegesToShareSpec.
func (in *PrivilegesToShareSpec) DeepCopy() *PrivilegesToShareSpec {
	if in == nil {
		return nil
	}
	out := new(PrivilegesToShareSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrivilegesToShareStatus) DeepCopyInto(out *PrivilegesToShareStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrivilegesToShareStatus.
func (in *PrivilegesToShareStatus) DeepCopy() *PrivilegesToShareStatus {
	if in == nil {
		return nil
	}
	out := new(PrivilegesToShareStatus)
	in.DeepCopyInto(out)
	return out
}
