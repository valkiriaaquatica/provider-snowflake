// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MaxConcurrencyLevelInitParameters struct {
}

type MaxConcurrencyLevelObservation struct {

	// (String)
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String)
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// (String)
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type MaxConcurrencyLevelParameters struct {
}

type ParametersInitParameters struct {
}

type ParametersObservation struct {

	// (Number) Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	MaxConcurrencyLevel []MaxConcurrencyLevelObservation `json:"maxConcurrencyLevel,omitempty" tf:"max_concurrency_level,omitempty"`

	// (Number) Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	StatementQueuedTimeoutInSeconds []StatementQueuedTimeoutInSecondsObservation `json:"statementQueuedTimeoutInSeconds,omitempty" tf:"statement_queued_timeout_in_seconds,omitempty"`

	// (Number) Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	StatementTimeoutInSeconds []StatementTimeoutInSecondsObservation `json:"statementTimeoutInSeconds,omitempty" tf:"statement_timeout_in_seconds,omitempty"`
}

type ParametersParameters struct {
}

type ShowOutputInitParameters struct {
}

type ShowOutputObservation struct {

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AutoResume *bool `json:"autoResume,omitempty" tf:"auto_resume,omitempty"`

	// uses special value that cannot be set in the configuration manually (-1)) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	AutoSuspend *float64 `json:"autoSuspend,omitempty" tf:"auto_suspend,omitempty"`

	// (Number)
	Available *float64 `json:"available,omitempty" tf:"available,omitempty"`

	// (String) Specifies a comment for the warehouse.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	EnableQueryAcceleration *bool `json:"enableQueryAcceleration,omitempty" tf:"enable_query_acceleration,omitempty"`

	// insensitive): 1 | 2.
	Generation *string `json:"generation,omitempty" tf:"generation,omitempty"`

	// (Boolean)
	IsCurrent *bool `json:"isCurrent,omitempty" tf:"is_current,omitempty"`

	// (Boolean)
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (Number) Specifies the maximum number of server clusters for the warehouse.
	MaxClusterCount *float64 `json:"maxClusterCount,omitempty" tf:"max_cluster_count,omitempty"`

	// cluster warehouses).
	MinClusterCount *float64 `json:"minClusterCount,omitempty" tf:"min_cluster_count,omitempty"`

	// (String) Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Number)
	Other *float64 `json:"other,omitempty" tf:"other,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (String)
	OwnerRoleType *string `json:"ownerRoleType,omitempty" tf:"owner_role_type,omitempty"`

	// (Number)
	Provisioning *float64 `json:"provisioning,omitempty" tf:"provisioning,omitempty"`

	// uses special value that cannot be set in the configuration manually (-1)) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	QueryAccelerationMaxScaleFactor *float64 `json:"queryAccelerationMaxScaleFactor,omitempty" tf:"query_acceleration_max_scale_factor,omitempty"`

	// (Number)
	Queued *float64 `json:"queued,omitempty" tf:"queued,omitempty"`

	// (Number)
	Quiescing *float64 `json:"quiescing,omitempty" tf:"quiescing,omitempty"`

	// optimized warehouses. For setting generation please use the generation field. Please check Snowflake documentation for required warehouse sizes for each resource constraint. Valid values are (case-insensitive): MEMORY_1X | MEMORY_1X_x86 | MEMORY_16X | MEMORY_16X_x86 | MEMORY_64X | MEMORY_64X_x86.
	ResourceConstraint *string `json:"resourceConstraint,omitempty" tf:"resource_constraint,omitempty"`

	// (String) Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this resource, see docs.
	ResourceMonitor *string `json:"resourceMonitor,omitempty" tf:"resource_monitor,omitempty"`

	// (String)
	ResumedOn *string `json:"resumedOn,omitempty" tf:"resumed_on,omitempty"`

	// (Number)
	Running *float64 `json:"running,omitempty" tf:"running,omitempty"`

	// cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): STANDARD | ECONOMY.
	ScalingPolicy *string `json:"scalingPolicy,omitempty" tf:"scaling_policy,omitempty"`

	// (String)
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// (Number)
	StartedClusters *float64 `json:"startedClusters,omitempty" tf:"started_clusters,omitempty"`

	// (String)
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (String)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (String)
	UpdatedOn *string `json:"updatedOn,omitempty" tf:"updated_on,omitempty"`
}

type ShowOutputParameters struct {
}

type StatementQueuedTimeoutInSecondsInitParameters struct {
}

type StatementQueuedTimeoutInSecondsObservation struct {

	// (String)
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String)
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// (String)
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StatementQueuedTimeoutInSecondsParameters struct {
}

type StatementTimeoutInSecondsInitParameters struct {
}

type StatementTimeoutInSecondsObservation struct {

	// (String)
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// (String)
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String)
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (String)
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// (String)
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type StatementTimeoutInSecondsParameters struct {
}

type WarehouseInitParameters struct {

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AutoResume *string `json:"autoResume,omitempty" tf:"auto_resume,omitempty"`

	// uses special value that cannot be set in the configuration manually (-1)) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	AutoSuspend *float64 `json:"autoSuspend,omitempty" tf:"auto_suspend,omitempty"`

	// (String) Specifies a comment for the warehouse.
	// Specifies a comment for the warehouse.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	EnableQueryAcceleration *string `json:"enableQueryAcceleration,omitempty" tf:"enable_query_acceleration,omitempty"`

	// insensitive): 1 | 2.
	// Specifies the generation for the warehouse. Only available for standard warehouses. Valid values are (case-insensitive): `1` | `2`.
	Generation *string `json:"generation,omitempty" tf:"generation,omitempty"`

	// (Boolean) Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	// Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	InitiallySuspended *bool `json:"initiallySuspended,omitempty" tf:"initially_suspended,omitempty"`

	// (Number) Specifies the maximum number of server clusters for the warehouse.
	// Specifies the maximum number of server clusters for the warehouse.
	MaxClusterCount *float64 `json:"maxClusterCount,omitempty" tf:"max_cluster_count,omitempty"`

	// (Number) Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	// Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	MaxConcurrencyLevel *float64 `json:"maxConcurrencyLevel,omitempty" tf:"max_concurrency_level,omitempty"`

	// cluster warehouses).
	// Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).
	MinClusterCount *float64 `json:"minClusterCount,omitempty" tf:"min_cluster_count,omitempty"`

	// (String) Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// uses special value that cannot be set in the configuration manually (-1)) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	QueryAccelerationMaxScaleFactor *float64 `json:"queryAccelerationMaxScaleFactor,omitempty" tf:"query_acceleration_max_scale_factor,omitempty"`

	// optimized warehouses. For setting generation please use the generation field. Please check Snowflake documentation for required warehouse sizes for each resource constraint. Valid values are (case-insensitive): MEMORY_1X | MEMORY_1X_x86 | MEMORY_16X | MEMORY_16X_x86 | MEMORY_64X | MEMORY_64X_x86.
	// Specifies the resource constraint for the warehouse. Only available for snowpark-optimized warehouses. For setting generation please use the `generation` field. Please check [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for required warehouse sizes for each resource constraint. Valid values are (case-insensitive): `MEMORY_1X` | `MEMORY_1X_x86` | `MEMORY_16X` | `MEMORY_16X_x86` | `MEMORY_64X` | `MEMORY_64X_x86`.
	ResourceConstraint *string `json:"resourceConstraint,omitempty" tf:"resource_constraint,omitempty"`

	// (String) Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this resource, see docs.
	// Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this resource, see [docs](./resource_monitor).
	ResourceMonitor *string `json:"resourceMonitor,omitempty" tf:"resource_monitor,omitempty"`

	// cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): STANDARD | ECONOMY.
	// Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.
	ScalingPolicy *string `json:"scalingPolicy,omitempty" tf:"scaling_policy,omitempty"`

	// (Number) Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	// Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	StatementQueuedTimeoutInSeconds *float64 `json:"statementQueuedTimeoutInSeconds,omitempty" tf:"statement_queued_timeout_in_seconds,omitempty"`

	// (Number) Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	// Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	StatementTimeoutInSeconds *float64 `json:"statementTimeoutInSeconds,omitempty" tf:"statement_timeout_in_seconds,omitempty"`

	// insensitive): XSMALL | X-SMALL | SMALL | MEDIUM | LARGE | XLARGE | X-LARGE | XXLARGE | X2LARGE | 2X-LARGE | XXXLARGE | X3LARGE | 3X-LARGE | X4LARGE | 4X-LARGE | X5LARGE | 5X-LARGE | X6LARGE | 6X-LARGE. Consult warehouse documentation for the details. Note: removing the size from config will result in the resource recreation.
	// Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.
	WarehouseSize *string `json:"warehouseSize,omitempty" tf:"warehouse_size,omitempty"`

	// insensitive): STANDARD | SNOWPARK-OPTIMIZED. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.
	// Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.
	WarehouseType *string `json:"warehouseType,omitempty" tf:"warehouse_type,omitempty"`
}

type WarehouseObservation struct {

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	AutoResume *string `json:"autoResume,omitempty" tf:"auto_resume,omitempty"`

	// uses special value that cannot be set in the configuration manually (-1)) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	AutoSuspend *float64 `json:"autoSuspend,omitempty" tf:"auto_suspend,omitempty"`

	// (String) Specifies a comment for the warehouse.
	// Specifies a comment for the warehouse.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	EnableQueryAcceleration *string `json:"enableQueryAcceleration,omitempty" tf:"enable_query_acceleration,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// insensitive): 1 | 2.
	// Specifies the generation for the warehouse. Only available for standard warehouses. Valid values are (case-insensitive): `1` | `2`.
	Generation *string `json:"generation,omitempty" tf:"generation,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	// Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	InitiallySuspended *bool `json:"initiallySuspended,omitempty" tf:"initially_suspended,omitempty"`

	// (Number) Specifies the maximum number of server clusters for the warehouse.
	// Specifies the maximum number of server clusters for the warehouse.
	MaxClusterCount *float64 `json:"maxClusterCount,omitempty" tf:"max_cluster_count,omitempty"`

	// (Number) Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	// Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	MaxConcurrencyLevel *float64 `json:"maxConcurrencyLevel,omitempty" tf:"max_concurrency_level,omitempty"`

	// cluster warehouses).
	// Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).
	MinClusterCount *float64 `json:"minClusterCount,omitempty" tf:"min_cluster_count,omitempty"`

	// (String) Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of Object) Outputs the result of SHOW PARAMETERS IN WAREHOUSE for the given warehouse. (see below for nested schema)
	// Outputs the result of `SHOW PARAMETERS IN WAREHOUSE` for the given warehouse.
	Parameters []ParametersObservation `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// uses special value that cannot be set in the configuration manually (-1)) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	QueryAccelerationMaxScaleFactor *float64 `json:"queryAccelerationMaxScaleFactor,omitempty" tf:"query_acceleration_max_scale_factor,omitempty"`

	// optimized warehouses. For setting generation please use the generation field. Please check Snowflake documentation for required warehouse sizes for each resource constraint. Valid values are (case-insensitive): MEMORY_1X | MEMORY_1X_x86 | MEMORY_16X | MEMORY_16X_x86 | MEMORY_64X | MEMORY_64X_x86.
	// Specifies the resource constraint for the warehouse. Only available for snowpark-optimized warehouses. For setting generation please use the `generation` field. Please check [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for required warehouse sizes for each resource constraint. Valid values are (case-insensitive): `MEMORY_1X` | `MEMORY_1X_x86` | `MEMORY_16X` | `MEMORY_16X_x86` | `MEMORY_64X` | `MEMORY_64X_x86`.
	ResourceConstraint *string `json:"resourceConstraint,omitempty" tf:"resource_constraint,omitempty"`

	// (String) Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this resource, see docs.
	// Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this resource, see [docs](./resource_monitor).
	ResourceMonitor *string `json:"resourceMonitor,omitempty" tf:"resource_monitor,omitempty"`

	// cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): STANDARD | ECONOMY.
	// Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.
	ScalingPolicy *string `json:"scalingPolicy,omitempty" tf:"scaling_policy,omitempty"`

	// (List of Object) Outputs the result of SHOW WAREHOUSES for the given warehouse. (see below for nested schema)
	// Outputs the result of `SHOW WAREHOUSES` for the given warehouse.
	ShowOutput []ShowOutputObservation `json:"showOutput,omitempty" tf:"show_output,omitempty"`

	// (Number) Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	// Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	StatementQueuedTimeoutInSeconds *float64 `json:"statementQueuedTimeoutInSeconds,omitempty" tf:"statement_queued_timeout_in_seconds,omitempty"`

	// (Number) Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	// Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	StatementTimeoutInSeconds *float64 `json:"statementTimeoutInSeconds,omitempty" tf:"statement_timeout_in_seconds,omitempty"`

	// insensitive): XSMALL | X-SMALL | SMALL | MEDIUM | LARGE | XLARGE | X-LARGE | XXLARGE | X2LARGE | 2X-LARGE | XXXLARGE | X3LARGE | 3X-LARGE | X4LARGE | 4X-LARGE | X5LARGE | 5X-LARGE | X6LARGE | 6X-LARGE. Consult warehouse documentation for the details. Note: removing the size from config will result in the resource recreation.
	// Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.
	WarehouseSize *string `json:"warehouseSize,omitempty" tf:"warehouse_size,omitempty"`

	// insensitive): STANDARD | SNOWPARK-OPTIMIZED. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.
	// Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.
	WarehouseType *string `json:"warehouseType,omitempty" tf:"warehouse_type,omitempty"`
}

type WarehouseParameters struct {

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to automatically resume a warehouse when a SQL statement (e.g. query) is submitted to it. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// +kubebuilder:validation:Optional
	AutoResume *string `json:"autoResume,omitempty" tf:"auto_resume,omitempty"`

	// uses special value that cannot be set in the configuration manually (-1)) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the number of seconds of inactivity after which a warehouse is automatically suspended.
	// +kubebuilder:validation:Optional
	AutoSuspend *float64 `json:"autoSuspend,omitempty" tf:"auto_suspend,omitempty"`

	// (String) Specifies a comment for the warehouse.
	// Specifies a comment for the warehouse.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether to enable the query acceleration service for queries that rely on this warehouse for compute resources. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// +kubebuilder:validation:Optional
	EnableQueryAcceleration *string `json:"enableQueryAcceleration,omitempty" tf:"enable_query_acceleration,omitempty"`

	// insensitive): 1 | 2.
	// Specifies the generation for the warehouse. Only available for standard warehouses. Valid values are (case-insensitive): `1` | `2`.
	// +kubebuilder:validation:Optional
	Generation *string `json:"generation,omitempty" tf:"generation,omitempty"`

	// (Boolean) Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	// Specifies whether the warehouse is created initially in the ‘Suspended’ state.
	// +kubebuilder:validation:Optional
	InitiallySuspended *bool `json:"initiallySuspended,omitempty" tf:"initially_suspended,omitempty"`

	// (Number) Specifies the maximum number of server clusters for the warehouse.
	// Specifies the maximum number of server clusters for the warehouse.
	// +kubebuilder:validation:Optional
	MaxClusterCount *float64 `json:"maxClusterCount,omitempty" tf:"max_cluster_count,omitempty"`

	// (Number) Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	// Object parameter that specifies the concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse.
	// +kubebuilder:validation:Optional
	MaxConcurrencyLevel *float64 `json:"maxConcurrencyLevel,omitempty" tf:"max_concurrency_level,omitempty"`

	// cluster warehouses).
	// Specifies the minimum number of server clusters for the warehouse (only applies to multi-cluster warehouses).
	// +kubebuilder:validation:Optional
	MinClusterCount *float64 `json:"minClusterCount,omitempty" tf:"min_cluster_count,omitempty"`

	// (String) Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Identifier for the virtual warehouse; must be unique for your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// uses special value that cannot be set in the configuration manually (-1)) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`-1`)) Specifies the maximum scale factor for leasing compute resources for query acceleration. The scale factor is used as a multiplier based on warehouse size.
	// +kubebuilder:validation:Optional
	QueryAccelerationMaxScaleFactor *float64 `json:"queryAccelerationMaxScaleFactor,omitempty" tf:"query_acceleration_max_scale_factor,omitempty"`

	// optimized warehouses. For setting generation please use the generation field. Please check Snowflake documentation for required warehouse sizes for each resource constraint. Valid values are (case-insensitive): MEMORY_1X | MEMORY_1X_x86 | MEMORY_16X | MEMORY_16X_x86 | MEMORY_64X | MEMORY_64X_x86.
	// Specifies the resource constraint for the warehouse. Only available for snowpark-optimized warehouses. For setting generation please use the `generation` field. Please check [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for required warehouse sizes for each resource constraint. Valid values are (case-insensitive): `MEMORY_1X` | `MEMORY_1X_x86` | `MEMORY_16X` | `MEMORY_16X_x86` | `MEMORY_64X` | `MEMORY_64X_x86`.
	// +kubebuilder:validation:Optional
	ResourceConstraint *string `json:"resourceConstraint,omitempty" tf:"resource_constraint,omitempty"`

	// (String) Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this resource, see docs.
	// Specifies the name of a resource monitor that is explicitly assigned to the warehouse. For more information about this resource, see [docs](./resource_monitor).
	// +kubebuilder:validation:Optional
	ResourceMonitor *string `json:"resourceMonitor,omitempty" tf:"resource_monitor,omitempty"`

	// cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): STANDARD | ECONOMY.
	// Specifies the policy for automatically starting and shutting down clusters in a multi-cluster warehouse running in Auto-scale mode. Valid values are (case-insensitive): `STANDARD` | `ECONOMY`.
	// +kubebuilder:validation:Optional
	ScalingPolicy *string `json:"scalingPolicy,omitempty" tf:"scaling_policy,omitempty"`

	// (Number) Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	// Object parameter that specifies the time, in seconds, a SQL statement (query, DDL, DML, etc.) can be queued on a warehouse before it is canceled by the system.
	// +kubebuilder:validation:Optional
	StatementQueuedTimeoutInSeconds *float64 `json:"statementQueuedTimeoutInSeconds,omitempty" tf:"statement_queued_timeout_in_seconds,omitempty"`

	// (Number) Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	// Specifies the time, in seconds, after which a running SQL statement (query, DDL, DML, etc.) is canceled by the system
	// +kubebuilder:validation:Optional
	StatementTimeoutInSeconds *float64 `json:"statementTimeoutInSeconds,omitempty" tf:"statement_timeout_in_seconds,omitempty"`

	// insensitive): XSMALL | X-SMALL | SMALL | MEDIUM | LARGE | XLARGE | X-LARGE | XXLARGE | X2LARGE | 2X-LARGE | XXXLARGE | X3LARGE | 3X-LARGE | X4LARGE | 4X-LARGE | X5LARGE | 5X-LARGE | X6LARGE | 6X-LARGE. Consult warehouse documentation for the details. Note: removing the size from config will result in the resource recreation.
	// Specifies the size of the virtual warehouse. Valid values are (case-insensitive): `XSMALL` | `X-SMALL` | `SMALL` | `MEDIUM` | `LARGE` | `XLARGE` | `X-LARGE` | `XXLARGE` | `X2LARGE` | `2X-LARGE` | `XXXLARGE` | `X3LARGE` | `3X-LARGE` | `X4LARGE` | `4X-LARGE` | `X5LARGE` | `5X-LARGE` | `X6LARGE` | `6X-LARGE`. Consult [warehouse documentation](https://docs.snowflake.com/en/sql-reference/sql/create-warehouse#optional-properties-objectproperties) for the details. Note: removing the size from config will result in the resource recreation.
	// +kubebuilder:validation:Optional
	WarehouseSize *string `json:"warehouseSize,omitempty" tf:"warehouse_size,omitempty"`

	// insensitive): STANDARD | SNOWPARK-OPTIMIZED. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.
	// Specifies warehouse type. Valid values are (case-insensitive): `STANDARD` | `SNOWPARK-OPTIMIZED`. Warehouse needs to be suspended to change its type. Provider will handle automatic suspension and resumption if needed.
	// +kubebuilder:validation:Optional
	WarehouseType *string `json:"warehouseType,omitempty" tf:"warehouse_type,omitempty"`
}

// WarehouseSpec defines the desired state of Warehouse
type WarehouseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WarehouseParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WarehouseInitParameters `json:"initProvider,omitempty"`
}

// WarehouseStatus defines the observed state of Warehouse.
type WarehouseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WarehouseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Warehouse is the Schema for the Warehouses API. Resource used to manage warehouse objects. For more information, check warehouse documentation https://docs.snowflake.com/en/sql-reference/commands-warehouse.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Warehouse struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   WarehouseSpec   `json:"spec"`
	Status WarehouseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WarehouseList contains a list of Warehouses
type WarehouseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Warehouse `json:"items"`
}

// Repository type metadata.
var (
	Warehouse_Kind             = "Warehouse"
	Warehouse_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Warehouse_Kind}.String()
	Warehouse_KindAPIVersion   = Warehouse_Kind + "." + CRDGroupVersion.String()
	Warehouse_GroupVersionKind = CRDGroupVersion.WithKind(Warehouse_Kind)
)

func init() {
	SchemeBuilder.Register(&Warehouse{}, &WarehouseList{})
}
