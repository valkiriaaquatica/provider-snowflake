// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MonitorInitParameters struct {

	// (Number) The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
	// The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
	CreditQuota *float64 `json:"creditQuota,omitempty" tf:"credit_quota,omitempty"`

	// (String) The date and time when the resource monitor suspends the assigned warehouses.
	// The date and time when the resource monitor suspends the assigned warehouses.
	EndTimestamp *string `json:"endTimestamp,omitempty" tf:"end_timestamp,omitempty"`

	// insensitive): MONTHLY | DAILY | WEEKLY | YEARLY | NEVER. If you set a frequency for a resource monitor, you must also set start_timestamp. If you specify NEVER for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	// The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of Number) Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
	// Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
	// +listType=set
	NotifyTriggers []*float64 `json:"notifyTriggers,omitempty" tf:"notify_triggers,omitempty"`

	// (Set of String) Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more information about this resource, see docs.
	// Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more information about this resource, see [docs](./user).
	// +listType=set
	NotifyUsers []*string `json:"notifyUsers,omitempty" tf:"notify_users,omitempty"`

	// (String) The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a start_timestamp for a resource monitor, you must also set frequency.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	// The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	StartTimestamp *string `json:"startTimestamp,omitempty" tf:"start_timestamp,omitempty"`

	// (Number) Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	SuspendImmediateTrigger *float64 `json:"suspendImmediateTrigger,omitempty" tf:"suspend_immediate_trigger,omitempty"`

	// (Number) Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	SuspendTrigger *float64 `json:"suspendTrigger,omitempty" tf:"suspend_trigger,omitempty"`
}

type MonitorObservation struct {

	// (Number) The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
	// The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
	CreditQuota *float64 `json:"creditQuota,omitempty" tf:"credit_quota,omitempty"`

	// (String) The date and time when the resource monitor suspends the assigned warehouses.
	// The date and time when the resource monitor suspends the assigned warehouses.
	EndTimestamp *string `json:"endTimestamp,omitempty" tf:"end_timestamp,omitempty"`

	// insensitive): MONTHLY | DAILY | WEEKLY | YEARLY | NEVER. If you set a frequency for a resource monitor, you must also set start_timestamp. If you specify NEVER for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	// The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of Number) Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
	// Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
	// +listType=set
	NotifyTriggers []*float64 `json:"notifyTriggers,omitempty" tf:"notify_triggers,omitempty"`

	// (Set of String) Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more information about this resource, see docs.
	// Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more information about this resource, see [docs](./user).
	// +listType=set
	NotifyUsers []*string `json:"notifyUsers,omitempty" tf:"notify_users,omitempty"`

	// (List of Object) Outputs the result of SHOW RESOURCE MONITORS for the given resource monitor. (see below for nested schema)
	// Outputs the result of `SHOW RESOURCE MONITORS` for the given resource monitor.
	ShowOutput []ShowOutputObservation `json:"showOutput,omitempty" tf:"show_output,omitempty"`

	// (String) The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a start_timestamp for a resource monitor, you must also set frequency.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	// The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	StartTimestamp *string `json:"startTimestamp,omitempty" tf:"start_timestamp,omitempty"`

	// (Number) Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	SuspendImmediateTrigger *float64 `json:"suspendImmediateTrigger,omitempty" tf:"suspend_immediate_trigger,omitempty"`

	// (Number) Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	SuspendTrigger *float64 `json:"suspendTrigger,omitempty" tf:"suspend_trigger,omitempty"`
}

type MonitorParameters struct {

	// (Number) The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
	// The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
	// +kubebuilder:validation:Optional
	CreditQuota *float64 `json:"creditQuota,omitempty" tf:"credit_quota,omitempty"`

	// (String) The date and time when the resource monitor suspends the assigned warehouses.
	// The date and time when the resource monitor suspends the assigned warehouses.
	// +kubebuilder:validation:Optional
	EndTimestamp *string `json:"endTimestamp,omitempty" tf:"end_timestamp,omitempty"`

	// insensitive): MONTHLY | DAILY | WEEKLY | YEARLY | NEVER. If you set a frequency for a resource monitor, you must also set start_timestamp. If you specify NEVER for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	// The frequency interval at which the credit usage resets to 0. Valid values are (case-insensitive): `MONTHLY` | `DAILY` | `WEEKLY` | `YEARLY` | `NEVER`. If you set a `frequency` for a resource monitor, you must also set `start_timestamp`. If you specify `NEVER` for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	// +kubebuilder:validation:Optional
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String) Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of Number) Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
	// Specifies a list of percentages of the credit quota. After reaching any of the values the users passed in the notify_users field will be notified (to receive the notification they should have notifications enabled). Values over 100 are supported.
	// +kubebuilder:validation:Optional
	// +listType=set
	NotifyTriggers []*float64 `json:"notifyTriggers,omitempty" tf:"notify_triggers,omitempty"`

	// (Set of String) Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more information about this resource, see docs.
	// Specifies the list of users (their identifiers) to receive email notifications on resource monitors. For more information about this resource, see [docs](./user).
	// +kubebuilder:validation:Optional
	// +listType=set
	NotifyUsers []*string `json:"notifyUsers,omitempty" tf:"notify_users,omitempty"`

	// (String) The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a start_timestamp for a resource monitor, you must also set frequency.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	// The date and time when the resource monitor starts monitoring credit usage for the assigned warehouses. If you set a `start_timestamp` for a resource monitor, you must also set `frequency`.  After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	// +kubebuilder:validation:Optional
	StartTimestamp *string `json:"startTimestamp,omitempty" tf:"start_timestamp,omitempty"`

	// (Number) Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses immediately cancel any currently running queries or statements. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	// +kubebuilder:validation:Optional
	SuspendImmediateTrigger *float64 `json:"suspendImmediateTrigger,omitempty" tf:"suspend_immediate_trigger,omitempty"`

	// (Number) Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	// Represents a numeric value specified as a percentage of the credit quota. Values over 100 are supported. After reaching this value, all assigned warehouses while allowing currently running queries to complete will be suspended. No new queries can be executed by the warehouses until the credit quota for the resource monitor is increased. In addition, this action sends a notification to all users who have enabled notifications for themselves.
	// +kubebuilder:validation:Optional
	SuspendTrigger *float64 `json:"suspendTrigger,omitempty" tf:"suspend_trigger,omitempty"`
}

type ShowOutputInitParameters struct {
}

type ShowOutputObservation struct {

	// (String)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (Number) The number of credits allocated to the resource monitor per frequency interval. When total usage for all warehouses assigned to the monitor reaches this number for the current frequency interval, the resource monitor is considered to be at 100% of quota.
	CreditQuota *float64 `json:"creditQuota,omitempty" tf:"credit_quota,omitempty"`

	// (String)
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// insensitive): MONTHLY | DAILY | WEEKLY | YEARLY | NEVER. If you set a frequency for a resource monitor, you must also set start_timestamp. If you specify NEVER for the frequency, the credit usage for the warehouse does not reset. After removing this field from the config, the previously set value will be preserved on the Snowflake side, not the default value. That's due to Snowflake limitation and the lack of unset functionality for this parameter.
	Frequency *string `json:"frequency,omitempty" tf:"frequency,omitempty"`

	// (String)
	Level *string `json:"level,omitempty" tf:"level,omitempty"`

	// (String) Identifier for the resource monitor; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (Number)
	RemainingCredits *float64 `json:"remainingCredits,omitempty" tf:"remaining_credits,omitempty"`

	// (String)
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// (Number)
	SuspendAt *float64 `json:"suspendAt,omitempty" tf:"suspend_at,omitempty"`

	// (Number)
	SuspendImmediateAt *float64 `json:"suspendImmediateAt,omitempty" tf:"suspend_immediate_at,omitempty"`

	// (Number)
	UsedCredits *float64 `json:"usedCredits,omitempty" tf:"used_credits,omitempty"`
}

type ShowOutputParameters struct {
}

// MonitorSpec defines the desired state of Monitor
type MonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MonitorInitParameters `json:"initProvider,omitempty"`
}

// MonitorStatus defines the observed state of Monitor.
type MonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Monitor is the Schema for the Monitors API. Resource used to manage resource monitor objects. For more information, check resource monitor documentation https://docs.snowflake.com/en/user-guide/resource-monitors.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Monitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   MonitorSpec   `json:"spec"`
	Status MonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorList contains a list of Monitors
type MonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Monitor `json:"items"`
}

// Repository type metadata.
var (
	Monitor_Kind             = "Monitor"
	Monitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Monitor_Kind}.String()
	Monitor_KindAPIVersion   = Monitor_Kind + "." + CRDGroupVersion.String()
	Monitor_GroupVersionKind = CRDGroupVersion.WithKind(Monitor_Kind)
)

func init() {
	SchemeBuilder.Register(&Monitor{}, &MonitorList{})
}
