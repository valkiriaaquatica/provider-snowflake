// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AggregationPolicyInitParameters struct {

	// (Set of String) Defines which columns uniquely identify an entity within the view.
	// Defines which columns uniquely identify an entity within the view.
	// +listType=set
	EntityKey []*string `json:"entityKey,omitempty" tf:"entity_key,omitempty"`

	// (String) Aggregation policy name.
	// Aggregation policy name.
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`
}

type AggregationPolicyObservation struct {

	// (Set of String) Defines which columns uniquely identify an entity within the view.
	// Defines which columns uniquely identify an entity within the view.
	// +listType=set
	EntityKey []*string `json:"entityKey,omitempty" tf:"entity_key,omitempty"`

	// (String) Aggregation policy name.
	// Aggregation policy name.
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`
}

type AggregationPolicyParameters struct {

	// (Set of String) Defines which columns uniquely identify an entity within the view.
	// Defines which columns uniquely identify an entity within the view.
	// +kubebuilder:validation:Optional
	// +listType=set
	EntityKey []*string `json:"entityKey,omitempty" tf:"entity_key,omitempty"`

	// (String) Aggregation policy name.
	// Aggregation policy name.
	// +kubebuilder:validation:Optional
	PolicyName *string `json:"policyName" tf:"policy_name,omitempty"`
}

type ColumnInitParameters struct {

	// (String) Specifies affected column name.
	// Specifies affected column name.
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`

	// (String) Specifies a comment for the view.
	// Specifies a comment for the column.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	MaskingPolicy []MaskingPolicyInitParameters `json:"maskingPolicy,omitempty" tf:"masking_policy,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	ProjectionPolicy []ProjectionPolicyInitParameters `json:"projectionPolicy,omitempty" tf:"projection_policy,omitempty"`
}

type ColumnObservation struct {

	// (String) Specifies affected column name.
	// Specifies affected column name.
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`

	// (String) Specifies a comment for the view.
	// Specifies a comment for the column.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	MaskingPolicy []MaskingPolicyObservation `json:"maskingPolicy,omitempty" tf:"masking_policy,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	ProjectionPolicy []ProjectionPolicyObservation `json:"projectionPolicy,omitempty" tf:"projection_policy,omitempty"`
}

type ColumnParameters struct {

	// (String) Specifies affected column name.
	// Specifies affected column name.
	// +kubebuilder:validation:Optional
	ColumnName *string `json:"columnName" tf:"column_name,omitempty"`

	// (String) Specifies a comment for the view.
	// Specifies a comment for the column.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	MaskingPolicy []MaskingPolicyParameters `json:"maskingPolicy,omitempty" tf:"masking_policy,omitempty"`

	// (Block List, Max: 1) (see below for nested schema)
	// +kubebuilder:validation:Optional
	ProjectionPolicy []ProjectionPolicyParameters `json:"projectionPolicy,omitempty" tf:"projection_policy,omitempty"`
}

type DataMetricFunctionInitParameters struct {

	// (String) Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
	// Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// (Set of String) The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
	// The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
	// +listType=set
	On []*string `json:"on,omitempty" tf:"on,omitempty"`

	// (String) The status of the metrics association. Valid values are: STARTED | SUSPENDED. When status of a data metric function is changed, it is being reassigned with DROP DATA METRIC FUNCTION and ADD DATA METRIC FUNCTION, and then its status is changed by MODIFY DATA METRIC FUNCTION
	// The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
	ScheduleStatus *string `json:"scheduleStatus,omitempty" tf:"schedule_status,omitempty"`
}

type DataMetricFunctionObservation struct {

	// (String) Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
	// Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
	FunctionName *string `json:"functionName,omitempty" tf:"function_name,omitempty"`

	// (Set of String) The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
	// The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
	// +listType=set
	On []*string `json:"on,omitempty" tf:"on,omitempty"`

	// (String) The status of the metrics association. Valid values are: STARTED | SUSPENDED. When status of a data metric function is changed, it is being reassigned with DROP DATA METRIC FUNCTION and ADD DATA METRIC FUNCTION, and then its status is changed by MODIFY DATA METRIC FUNCTION
	// The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
	ScheduleStatus *string `json:"scheduleStatus,omitempty" tf:"schedule_status,omitempty"`
}

type DataMetricFunctionParameters struct {

	// (String) Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
	// Identifier of the data metric function to add to the table or view or drop from the table or view. This function identifier must be provided without arguments in parenthesis.
	// +kubebuilder:validation:Optional
	FunctionName *string `json:"functionName" tf:"function_name,omitempty"`

	// (Set of String) The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
	// The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
	// +kubebuilder:validation:Optional
	// +listType=set
	On []*string `json:"on" tf:"on,omitempty"`

	// (String) The status of the metrics association. Valid values are: STARTED | SUSPENDED. When status of a data metric function is changed, it is being reassigned with DROP DATA METRIC FUNCTION and ADD DATA METRIC FUNCTION, and then its status is changed by MODIFY DATA METRIC FUNCTION
	// The status of the metrics association. Valid values are: `STARTED` | `SUSPENDED`. When status of a data metric function is changed, it is being reassigned with `DROP DATA METRIC FUNCTION` and `ADD DATA METRIC FUNCTION`, and then its status is changed by `MODIFY DATA METRIC FUNCTION`
	// +kubebuilder:validation:Optional
	ScheduleStatus *string `json:"scheduleStatus" tf:"schedule_status,omitempty"`
}

type DataMetricScheduleInitParameters struct {

	// (Number) Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with using_cron. Valid values are: 5 | 15 | 30 | 60 | 720 | 1440. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, using_cron field, or replace_triggered_by metadata argument.
	// Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `using_cron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using [taint](https://developer.hashicorp.hashicorp.
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`

	// (String) Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with minutes.
	// Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
	UsingCron *string `json:"usingCron,omitempty" tf:"using_cron,omitempty"`
}

type DataMetricScheduleObservation struct {

	// (Number) Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with using_cron. Valid values are: 5 | 15 | 30 | 60 | 720 | 1440. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, using_cron field, or replace_triggered_by metadata argument.
	// Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `using_cron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using [taint](https://developer.hashicorp.hashicorp.
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`

	// (String) Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with minutes.
	// Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
	UsingCron *string `json:"usingCron,omitempty" tf:"using_cron,omitempty"`
}

type DataMetricScheduleParameters struct {

	// (Number) Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with using_cron. Valid values are: 5 | 15 | 30 | 60 | 720 | 1440. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using taint command, using_cron field, or replace_triggered_by metadata argument.
	// Specifies an interval (in minutes) of wait time inserted between runs of the data metric function. Conflicts with `using_cron`. Valid values are: `5` | `15` | `30` | `60` | `720` | `1440`. Due to Snowflake limitations, changes in this field are not managed by the provider. Please consider using [taint](https://developer.hashicorp.hashicorp.
	// +kubebuilder:validation:Optional
	Minutes *float64 `json:"minutes,omitempty" tf:"minutes,omitempty"`

	// (String) Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with minutes.
	// Specifies a cron expression and time zone for periodically running the data metric function. Supports a subset of standard cron utility syntax. Conflicts with `minutes`.
	// +kubebuilder:validation:Optional
	UsingCron *string `json:"usingCron,omitempty" tf:"using_cron,omitempty"`
}

type DescribeOutputInitParameters struct {
}

type DescribeOutputObservation struct {

	// (String)
	Check *string `json:"check,omitempty" tf:"check,omitempty"`

	// (String) Specifies a comment for the view.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	Default *string `json:"default,omitempty" tf:"default,omitempty"`

	// (String)
	Expression *string `json:"expression,omitempty" tf:"expression,omitempty"`

	// (Boolean)
	IsNullable *bool `json:"isNullable,omitempty" tf:"is_nullable,omitempty"`

	// (Boolean)
	IsPrimary *bool `json:"isPrimary,omitempty" tf:"is_primary,omitempty"`

	// (Boolean)
	IsUnique *bool `json:"isUnique,omitempty" tf:"is_unique,omitempty"`

	// (String)
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Aggregation policy name.
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`

	// (String)
	PrivacyDomain *string `json:"privacyDomain,omitempty" tf:"privacy_domain,omitempty"`

	// (String)
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DescribeOutputParameters struct {
}

type MaskingPolicyInitParameters struct {

	// (String) Aggregation policy name.
	// Specifies the masking policy to set on a column. For more information about this resource, see [docs](./masking_policy).
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`

	// (List of String) Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
	// Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
	Using []*string `json:"using,omitempty" tf:"using,omitempty"`
}

type MaskingPolicyObservation struct {

	// (String) Aggregation policy name.
	// Specifies the masking policy to set on a column. For more information about this resource, see [docs](./masking_policy).
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`

	// (List of String) Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
	// Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
	Using []*string `json:"using,omitempty" tf:"using,omitempty"`
}

type MaskingPolicyParameters struct {

	// (String) Aggregation policy name.
	// Specifies the masking policy to set on a column. For more information about this resource, see [docs](./masking_policy).
	// +kubebuilder:validation:Optional
	PolicyName *string `json:"policyName" tf:"policy_name,omitempty"`

	// (List of String) Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
	// Specifies the arguments to pass into the conditional masking policy SQL expression. The first column in the list specifies the column for the policy conditions to mask or tokenize the data and must match the column to which the masking policy is set. The additional columns specify the columns to evaluate to determine whether to mask or tokenize the data in each row of the query result when a query is made on the first column. If the USING clause is omitted, Snowflake treats the conditional masking policy as a normal masking policy.
	// +kubebuilder:validation:Optional
	Using []*string `json:"using,omitempty" tf:"using,omitempty"`
}

type ProjectionPolicyInitParameters struct {

	// (String) Aggregation policy name.
	// Specifies the projection policy to set on a column.
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`
}

type ProjectionPolicyObservation struct {

	// (String) Aggregation policy name.
	// Specifies the projection policy to set on a column.
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`
}

type ProjectionPolicyParameters struct {

	// (String) Aggregation policy name.
	// Specifies the projection policy to set on a column.
	// +kubebuilder:validation:Optional
	PolicyName *string `json:"policyName" tf:"policy_name,omitempty"`
}

type RowAccessPolicyInitParameters struct {

	// (Set of String) The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
	// Defines which columns are affected by the policy.
	// +listType=set
	On []*string `json:"on,omitempty" tf:"on,omitempty"`

	// (String) Aggregation policy name.
	// Row access policy name. For more information about this resource, see [docs](./row_access_policy).
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`
}

type RowAccessPolicyObservation struct {

	// (Set of String) The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
	// Defines which columns are affected by the policy.
	// +listType=set
	On []*string `json:"on,omitempty" tf:"on,omitempty"`

	// (String) Aggregation policy name.
	// Row access policy name. For more information about this resource, see [docs](./row_access_policy).
	PolicyName *string `json:"policyName,omitempty" tf:"policy_name,omitempty"`
}

type RowAccessPolicyParameters struct {

	// (Set of String) The table or view columns on which to associate the data metric function. The data types of the columns must match the data types of the columns specified in the data metric function definition.
	// Defines which columns are affected by the policy.
	// +kubebuilder:validation:Optional
	// +listType=set
	On []*string `json:"on" tf:"on,omitempty"`

	// (String) Aggregation policy name.
	// Row access policy name. For more information about this resource, see [docs](./row_access_policy).
	// +kubebuilder:validation:Optional
	PolicyName *string `json:"policyName" tf:"policy_name,omitempty"`
}

type ShowOutputInitParameters struct {
}

type ShowOutputObservation struct {

	// uses special value that cannot be set in the configuration manually (default)) Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ChangeTracking *string `json:"changeTracking,omitempty" tf:"change_tracking,omitempty"`

	// (String) Specifies a comment for the view.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String)
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// (Boolean)
	IsMaterialized *bool `json:"isMaterialized,omitempty" tf:"is_materialized,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies that the view is secure. Use the role owning the view while managing secure views. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsSecure *bool `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// (String)
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (String)
	OwnerRoleType *string `json:"ownerRoleType,omitempty" tf:"owner_role_type,omitempty"`

	// (String)
	Reserved *string `json:"reserved,omitempty" tf:"reserved,omitempty"`

	// (String)
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`

	// (String)
	Text *string `json:"text,omitempty" tf:"text,omitempty"`
}

type ShowOutputParameters struct {
}

type ViewInitParameters struct {

	// (Block List, Max: 1) Specifies the aggregation policy to set on a view. (see below for nested schema)
	// Specifies the aggregation policy to set on a view.
	AggregationPolicy []AggregationPolicyInitParameters `json:"aggregationPolicy,omitempty" tf:"aggregation_policy,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ChangeTracking *string `json:"changeTracking,omitempty" tf:"change_tracking,omitempty"`

	// (Block List) If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the statement field by Snowflake. (see below for nested schema)
	// If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
	Column []ColumnInitParameters `json:"column,omitempty" tf:"column,omitempty"`

	// (String) Specifies a comment for the view.
	// Specifies a comment for the view.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Boolean) (Default: false) Retains the access permissions from the original view when a view is recreated using the OR REPLACE clause. This is used when the provider detects changes for fields that can not be changed by ALTER.
	// (Default: `false`) Retains the access permissions from the original view when a view is recreated using the OR REPLACE clause. This is used when the provider detects changes for fields that can not be changed by ALTER.
	CopyGrants *bool `json:"copyGrants,omitempty" tf:"copy_grants,omitempty"`

	// (Block Set) Data metric functions used for the view. (see below for nested schema)
	// Data metric functions used for the view.
	DataMetricFunction []DataMetricFunctionInitParameters `json:"dataMetricFunction,omitempty" tf:"data_metric_function,omitempty"`

	// (Block List, Max: 1) Specifies the schedule to run the data metric functions periodically. (see below for nested schema)
	// Specifies the schedule to run the data metric functions periodically.
	DataMetricSchedule []DataMetricScheduleInitParameters `json:"dataMetricSchedule,omitempty" tf:"data_metric_schedule,omitempty"`

	// (String) The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the view. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsRecursive *string `json:"isRecursive,omitempty" tf:"is_recursive,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies that the view is secure. Use the role owning the view while managing secure views. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view is secure. By design, the Snowflake's `SHOW VIEWS` command does not provide information about secure views (consult [view usage notes](https://docs.snowflake. Use the role owning the view while managing secure views. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsSecure *string `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies that the view persists only for the duration of the session that you created it in. A temporary view and all its contents are dropped at the end of the session. This results in a permanent plan with object creation. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view persists only for the duration of the session that you created it in. A temporary view and all its contents are dropped at the end of the session. This results in a permanent plan with object creation. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsTemporary *string `json:"isTemporary,omitempty" tf:"is_temporary,omitempty"`

	// (String) Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Specifies the row access policy to set on a view. (see below for nested schema)
	// Specifies the row access policy to set on a view.
	RowAccessPolicy []RowAccessPolicyInitParameters `json:"rowAccessPolicy,omitempty" tf:"row_access_policy,omitempty"`

	// (String) The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the view. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	// Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	Statement *string `json:"statement,omitempty" tf:"statement,omitempty"`
}

type ViewObservation struct {

	// (Block List, Max: 1) Specifies the aggregation policy to set on a view. (see below for nested schema)
	// Specifies the aggregation policy to set on a view.
	AggregationPolicy []AggregationPolicyObservation `json:"aggregationPolicy,omitempty" tf:"aggregation_policy,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ChangeTracking *string `json:"changeTracking,omitempty" tf:"change_tracking,omitempty"`

	// (Block List) If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the statement field by Snowflake. (see below for nested schema)
	// If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
	Column []ColumnObservation `json:"column,omitempty" tf:"column,omitempty"`

	// (String) Specifies a comment for the view.
	// Specifies a comment for the view.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Boolean) (Default: false) Retains the access permissions from the original view when a view is recreated using the OR REPLACE clause. This is used when the provider detects changes for fields that can not be changed by ALTER.
	// (Default: `false`) Retains the access permissions from the original view when a view is recreated using the OR REPLACE clause. This is used when the provider detects changes for fields that can not be changed by ALTER.
	CopyGrants *bool `json:"copyGrants,omitempty" tf:"copy_grants,omitempty"`

	// (Block Set) Data metric functions used for the view. (see below for nested schema)
	// Data metric functions used for the view.
	DataMetricFunction []DataMetricFunctionObservation `json:"dataMetricFunction,omitempty" tf:"data_metric_function,omitempty"`

	// (Block List, Max: 1) Specifies the schedule to run the data metric functions periodically. (see below for nested schema)
	// Specifies the schedule to run the data metric functions periodically.
	DataMetricSchedule []DataMetricScheduleObservation `json:"dataMetricSchedule,omitempty" tf:"data_metric_schedule,omitempty"`

	// (String) The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the view. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (List of Object) Outputs the result of DESCRIBE VIEW for the given view. (see below for nested schema)
	// Outputs the result of `DESCRIBE VIEW` for the given view.
	DescribeOutput []DescribeOutputObservation `json:"describeOutput,omitempty" tf:"describe_output,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsRecursive *string `json:"isRecursive,omitempty" tf:"is_recursive,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies that the view is secure. Use the role owning the view while managing secure views. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view is secure. By design, the Snowflake's `SHOW VIEWS` command does not provide information about secure views (consult [view usage notes](https://docs.snowflake. Use the role owning the view while managing secure views. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsSecure *string `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies that the view persists only for the duration of the session that you created it in. A temporary view and all its contents are dropped at the end of the session. This results in a permanent plan with object creation. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view persists only for the duration of the session that you created it in. A temporary view and all its contents are dropped at the end of the session. This results in a permanent plan with object creation. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	IsTemporary *string `json:"isTemporary,omitempty" tf:"is_temporary,omitempty"`

	// (String) Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Specifies the row access policy to set on a view. (see below for nested schema)
	// Specifies the row access policy to set on a view.
	RowAccessPolicy []RowAccessPolicyObservation `json:"rowAccessPolicy,omitempty" tf:"row_access_policy,omitempty"`

	// (String) The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the view. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (List of Object) Outputs the result of SHOW VIEW for the given view. (see below for nested schema)
	// Outputs the result of `SHOW VIEW` for the given view.
	ShowOutput []ShowOutputObservation `json:"showOutput,omitempty" tf:"show_output,omitempty"`

	// (String) Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	// Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	Statement *string `json:"statement,omitempty" tf:"statement,omitempty"`
}

type ViewParameters struct {

	// (Block List, Max: 1) Specifies the aggregation policy to set on a view. (see below for nested schema)
	// Specifies the aggregation policy to set on a view.
	// +kubebuilder:validation:Optional
	AggregationPolicy []AggregationPolicyParameters `json:"aggregationPolicy,omitempty" tf:"aggregation_policy,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies to enable or disable change tracking on the table. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// +kubebuilder:validation:Optional
	ChangeTracking *string `json:"changeTracking,omitempty" tf:"change_tracking,omitempty"`

	// (Block List) If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the statement field by Snowflake. (see below for nested schema)
	// If you want to change the name of a column or add a comment to a column in the new view, include a column list that specifies the column names and (if needed) comments about the columns. You do not need to specify the data types of the columns. If this field is not specified, columns are inferred from the `statement` field by Snowflake.
	// +kubebuilder:validation:Optional
	Column []ColumnParameters `json:"column,omitempty" tf:"column,omitempty"`

	// (String) Specifies a comment for the view.
	// Specifies a comment for the view.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (Boolean) (Default: false) Retains the access permissions from the original view when a view is recreated using the OR REPLACE clause. This is used when the provider detects changes for fields that can not be changed by ALTER.
	// (Default: `false`) Retains the access permissions from the original view when a view is recreated using the OR REPLACE clause. This is used when the provider detects changes for fields that can not be changed by ALTER.
	// +kubebuilder:validation:Optional
	CopyGrants *bool `json:"copyGrants,omitempty" tf:"copy_grants,omitempty"`

	// (Block Set) Data metric functions used for the view. (see below for nested schema)
	// Data metric functions used for the view.
	// +kubebuilder:validation:Optional
	DataMetricFunction []DataMetricFunctionParameters `json:"dataMetricFunction,omitempty" tf:"data_metric_function,omitempty"`

	// (Block List, Max: 1) Specifies the schedule to run the data metric functions periodically. (see below for nested schema)
	// Specifies the schedule to run the data metric functions periodically.
	// +kubebuilder:validation:Optional
	DataMetricSchedule []DataMetricScheduleParameters `json:"dataMetricSchedule,omitempty" tf:"data_metric_schedule,omitempty"`

	// (String) The database in which to create the view. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the view. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view can refer to itself using recursive syntax without necessarily using a CTE (common table expression). Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// +kubebuilder:validation:Optional
	IsRecursive *string `json:"isRecursive,omitempty" tf:"is_recursive,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies that the view is secure. Use the role owning the view while managing secure views. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view is secure. By design, the Snowflake's `SHOW VIEWS` command does not provide information about secure views (consult [view usage notes](https://docs.snowflake. Use the role owning the view while managing secure views. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// +kubebuilder:validation:Optional
	IsSecure *string `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies that the view persists only for the duration of the session that you created it in. A temporary view and all its contents are dropped at the end of the session. This results in a permanent plan with object creation. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies that the view persists only for the duration of the session that you created it in. A temporary view and all its contents are dropped at the end of the session. This results in a permanent plan with object creation. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// +kubebuilder:validation:Optional
	IsTemporary *string `json:"isTemporary,omitempty" tf:"is_temporary,omitempty"`

	// (String) Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Specifies the identifier for the view; must be unique for the schema in which the view is created. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Block List, Max: 1) Specifies the row access policy to set on a view. (see below for nested schema)
	// Specifies the row access policy to set on a view.
	// +kubebuilder:validation:Optional
	RowAccessPolicy []RowAccessPolicyParameters `json:"rowAccessPolicy,omitempty" tf:"row_access_policy,omitempty"`

	// (String) The schema in which to create the view. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the view. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	// Specifies the query used to create the view. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	// +kubebuilder:validation:Optional
	Statement *string `json:"statement,omitempty" tf:"statement,omitempty"`
}

// ViewSpec defines the desired state of View
type ViewSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ViewParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ViewInitParameters `json:"initProvider,omitempty"`
}

// ViewStatus defines the observed state of View.
type ViewStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ViewObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// View is the Schema for the Views API. Resource used to manage view objects. For more information, check view documentation https://docs.snowflake.com/en/sql-reference/sql/create-view.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type View struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.database) || (has(self.initProvider) && has(self.initProvider.database))",message="spec.forProvider.database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schema) || (has(self.initProvider) && has(self.initProvider.schema))",message="spec.forProvider.schema is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.statement) || (has(self.initProvider) && has(self.initProvider.statement))",message="spec.forProvider.statement is a required parameter"
	Spec   ViewSpec   `json:"spec"`
	Status ViewStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ViewList contains a list of Views
type ViewList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []View `json:"items"`
}

// Repository type metadata.
var (
	View_Kind             = "View"
	View_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: View_Kind}.String()
	View_KindAPIVersion   = View_Kind + "." + CRDGroupVersion.String()
	View_GroupVersionKind = CRDGroupVersion.WithKind(View_Kind)
)

func init() {
	SchemeBuilder.Register(&View{}, &ViewList{})
}
