// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExecuteInitParameters struct {

	// (String) SQL statement to execute. Forces recreation of resource on change.
	// SQL statement to execute. Forces recreation of resource on change.
	Execute *string `json:"execute,omitempty" tf:"execute,omitempty"`

	// (String) Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.
	// Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) SQL statement to revert the execute statement. Invoked when resource is being destroyed.
	// SQL statement to revert the execute statement. Invoked when resource is being destroyed.
	Revert *string `json:"revert,omitempty" tf:"revert,omitempty"`
}

type ExecuteObservation struct {

	// (String) SQL statement to execute. Forces recreation of resource on change.
	// SQL statement to execute. Forces recreation of resource on change.
	Execute *string `json:"execute,omitempty" tf:"execute,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.
	// Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// value maps (text to text) retrieved after executing read query. Will be empty if the query results in an error.
	// List of key-value maps (text to text) retrieved after executing read query. Will be empty if the query results in an error.
	QueryResults []map[string]*string `json:"queryResults,omitempty" tf:"query_results,omitempty"`

	// (String) SQL statement to revert the execute statement. Invoked when resource is being destroyed.
	// SQL statement to revert the execute statement. Invoked when resource is being destroyed.
	Revert *string `json:"revert,omitempty" tf:"revert,omitempty"`
}

type ExecuteParameters struct {

	// (String) SQL statement to execute. Forces recreation of resource on change.
	// SQL statement to execute. Forces recreation of resource on change.
	// +kubebuilder:validation:Optional
	Execute *string `json:"execute,omitempty" tf:"execute,omitempty"`

	// (String) Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.
	// Optional SQL statement to do a read. Invoked on every resource refresh and every time it is changed.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// (String) SQL statement to revert the execute statement. Invoked when resource is being destroyed.
	// SQL statement to revert the execute statement. Invoked when resource is being destroyed.
	// +kubebuilder:validation:Optional
	Revert *string `json:"revert,omitempty" tf:"revert,omitempty"`
}

// ExecuteSpec defines the desired state of Execute
type ExecuteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExecuteParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ExecuteInitParameters `json:"initProvider,omitempty"`
}

// ExecuteStatus defines the observed state of Execute.
type ExecuteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExecuteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Execute is the Schema for the Executes API. Resource allowing execution of ANY SQL statement.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Execute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.execute) || (has(self.initProvider) && has(self.initProvider.execute))",message="spec.forProvider.execute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.revert) || (has(self.initProvider) && has(self.initProvider.revert))",message="spec.forProvider.revert is a required parameter"
	Spec   ExecuteSpec   `json:"spec"`
	Status ExecuteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExecuteList contains a list of Executes
type ExecuteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Execute `json:"items"`
}

// Repository type metadata.
var (
	Execute_Kind             = "Execute"
	Execute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Execute_Kind}.String()
	Execute_KindAPIVersion   = Execute_Kind + "." + CRDGroupVersion.String()
	Execute_GroupVersionKind = CRDGroupVersion.WithKind(Execute_Kind)
)

func init() {
	SchemeBuilder.Register(&Execute{}, &ExecuteList{})
}
