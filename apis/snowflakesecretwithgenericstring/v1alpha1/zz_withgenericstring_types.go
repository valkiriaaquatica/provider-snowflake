// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DescribeOutputInitParameters struct {
}

type DescribeOutputObservation struct {

	// (String) Specifies a comment for the secret.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String)
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// (String)
	IntegrationName *string `json:"integrationName,omitempty" tf:"integration_name,omitempty"`

	// (String) String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	OauthAccessTokenExpiryTime *string `json:"oauthAccessTokenExpiryTime,omitempty" tf:"oauth_access_token_expiry_time,omitempty"`

	// (String)
	OauthRefreshTokenExpiryTime *string `json:"oauthRefreshTokenExpiryTime,omitempty" tf:"oauth_refresh_token_expiry_time,omitempty"`

	// (Set of String)
	// +listType=set
	OauthScopes []*string `json:"oauthScopes,omitempty" tf:"oauth_scopes,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (String)
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`

	// (String) Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.
	SecretType *string `json:"secretType,omitempty" tf:"secret_type,omitempty"`

	// (String)
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type DescribeOutputParameters struct {
}

type ShowOutputInitParameters struct {
}

type ShowOutputObservation struct {

	// (String) Specifies a comment for the secret.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String)
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// (String) String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Set of String)
	// +listType=set
	OauthScopes []*string `json:"oauthScopes,omitempty" tf:"oauth_scopes,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (String)
	OwnerRoleType *string `json:"ownerRoleType,omitempty" tf:"owner_role_type,omitempty"`

	// (String)
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`

	// (String) Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.
	SecretType *string `json:"secretType,omitempty" tf:"secret_type,omitempty"`
}

type ShowOutputParameters struct {
}

type WithGenericStringInitParameters struct {

	// (String) Specifies a comment for the secret.
	// Specifies a comment for the secret.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the secret Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the secret. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Specifies the string to store in the secret. The string can be an API token or a string of sensitive value that can be used in the handler code of a UDF or stored procedure. For details, see [Creating and using an external access integration](https://docs.snowflake.com/en/developer-guide/external-network-access/creating-using-external-network-access). You should not use this property to store any kind of OAuth token; use one of the other secret types for your OAuth use cases. External changes for this field won't be detected.
	SecretStringSecretRef v1.SecretKeySelector `json:"secretStringSecretRef" tf:"-"`
}

type WithGenericStringObservation struct {

	// (String) Specifies a comment for the secret.
	// Specifies a comment for the secret.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the secret Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (List of Object) Outputs the result of DESCRIBE SECRET for the given secret. (see below for nested schema)
	// Outputs the result of `DESCRIBE SECRET` for the given secret.
	DescribeOutput []DescribeOutputObservation `json:"describeOutput,omitempty" tf:"describe_output,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the secret. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.
	// Specifies a type for the secret. This field is used for checking external changes and recreating the resources if needed.
	SecretType *string `json:"secretType,omitempty" tf:"secret_type,omitempty"`

	// (List of Object) Outputs the result of SHOW SECRETS for the given secret. (see below for nested schema)
	// Outputs the result of `SHOW SECRETS` for the given secret.
	ShowOutput []ShowOutputObservation `json:"showOutput,omitempty" tf:"show_output,omitempty"`
}

type WithGenericStringParameters struct {

	// (String) Specifies a comment for the secret.
	// Specifies a comment for the secret.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) The database in which to create the secret Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the secret Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// String that specifies the identifier (i.e. name) for the secret, must be unique in your schema. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the secret. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the secret. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// Specifies the string to store in the secret. The string can be an API token or a string of sensitive value that can be used in the handler code of a UDF or stored procedure. For details, see [Creating and using an external access integration](https://docs.snowflake.com/en/developer-guide/external-network-access/creating-using-external-network-access). You should not use this property to store any kind of OAuth token; use one of the other secret types for your OAuth use cases. External changes for this field won't be detected.
	// +kubebuilder:validation:Optional
	SecretStringSecretRef v1.SecretKeySelector `json:"secretStringSecretRef" tf:"-"`
}

// WithGenericStringSpec defines the desired state of WithGenericString
type WithGenericStringSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WithGenericStringParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider WithGenericStringInitParameters `json:"initProvider,omitempty"`
}

// WithGenericStringStatus defines the observed state of WithGenericString.
type WithGenericStringStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WithGenericStringObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// WithGenericString is the Schema for the WithGenericStrings API. Resource used to manage secret objects with Generic String. For more information, check secret documentation https://docs.snowflake.com/en/sql-reference/sql/create-secret.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type WithGenericString struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.database) || (has(self.initProvider) && has(self.initProvider.database))",message="spec.forProvider.database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schema) || (has(self.initProvider) && has(self.initProvider.schema))",message="spec.forProvider.schema is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secretStringSecretRef)",message="spec.forProvider.secretStringSecretRef is a required parameter"
	Spec   WithGenericStringSpec   `json:"spec"`
	Status WithGenericStringStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WithGenericStringList contains a list of WithGenericStrings
type WithGenericStringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WithGenericString `json:"items"`
}

// Repository type metadata.
var (
	WithGenericString_Kind             = "WithGenericString"
	WithGenericString_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WithGenericString_Kind}.String()
	WithGenericString_KindAPIVersion   = WithGenericString_Kind + "." + CRDGroupVersion.String()
	WithGenericString_GroupVersionKind = CRDGroupVersion.WithKind(WithGenericString_Kind)
)

func init() {
	SchemeBuilder.Register(&WithGenericString{}, &WithGenericStringList{})
}
