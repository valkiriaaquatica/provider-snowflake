// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssociationInitParameters struct {

	// (Set of String) Specifies the object identifiers for the tag association.
	// Specifies the object identifiers for the tag association.
	// +listType=set
	ObjectIdentifiers []*string `json:"objectIdentifiers,omitempty" tf:"object_identifiers,omitempty"`

	// (String) Specifies the type of object to add a tag. Allowed object types: ACCOUNT | APPLICATION | APPLICATION PACKAGE | COMPUTE POOL | DATABASE | FAILOVER GROUP | INTEGRATION | NETWORK POLICY | REPLICATION GROUP | ROLE | SHARE | USER | WAREHOUSE | DATABASE ROLE | SCHEMA | ALERT | SNOWFLAKE.CORE.BUDGET | SNOWFLAKE.ML.CLASSIFICATION | EXTERNAL FUNCTION | EXTERNAL TABLE | FUNCTION | IMAGE REPOSITORY | GIT REPOSITORY | ICEBERG TABLE | MATERIALIZED VIEW | PIPE | MASKING POLICY | PASSWORD POLICY | ROW ACCESS POLICY | SESSION POLICY | PRIVACY POLICY | PROCEDURE | SERVICE | STAGE | STREAM | TABLE | TASK | VIEW | COLUMN | EVENT TABLE.
	// Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// (Boolean) (Default: true) If true, skips validation of the tag association.
	// (Default: `true`) If true, skips validation of the tag association.
	SkipValidation *bool `json:"skipValidation,omitempty" tf:"skip_validation,omitempty"`

	// (String) Specifies the identifier for the tag.
	// Specifies the identifier for the tag.
	TagID *string `json:"tagId,omitempty" tf:"tag_id,omitempty"`

	// (String) Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value,omitempty"`
}

type AssociationObservation struct {

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Set of String) Specifies the object identifiers for the tag association.
	// Specifies the object identifiers for the tag association.
	// +listType=set
	ObjectIdentifiers []*string `json:"objectIdentifiers,omitempty" tf:"object_identifiers,omitempty"`

	// (String) Specifies the type of object to add a tag. Allowed object types: ACCOUNT | APPLICATION | APPLICATION PACKAGE | COMPUTE POOL | DATABASE | FAILOVER GROUP | INTEGRATION | NETWORK POLICY | REPLICATION GROUP | ROLE | SHARE | USER | WAREHOUSE | DATABASE ROLE | SCHEMA | ALERT | SNOWFLAKE.CORE.BUDGET | SNOWFLAKE.ML.CLASSIFICATION | EXTERNAL FUNCTION | EXTERNAL TABLE | FUNCTION | IMAGE REPOSITORY | GIT REPOSITORY | ICEBERG TABLE | MATERIALIZED VIEW | PIPE | MASKING POLICY | PASSWORD POLICY | ROW ACCESS POLICY | SESSION POLICY | PRIVACY POLICY | PROCEDURE | SERVICE | STAGE | STREAM | TABLE | TASK | VIEW | COLUMN | EVENT TABLE.
	// Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// (Boolean) (Default: true) If true, skips validation of the tag association.
	// (Default: `true`) If true, skips validation of the tag association.
	SkipValidation *bool `json:"skipValidation,omitempty" tf:"skip_validation,omitempty"`

	// (String) Specifies the identifier for the tag.
	// Specifies the identifier for the tag.
	TagID *string `json:"tagId,omitempty" tf:"tag_id,omitempty"`

	// (String) Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value,omitempty"`
}

type AssociationParameters struct {

	// (Set of String) Specifies the object identifiers for the tag association.
	// Specifies the object identifiers for the tag association.
	// +kubebuilder:validation:Optional
	// +listType=set
	ObjectIdentifiers []*string `json:"objectIdentifiers,omitempty" tf:"object_identifiers,omitempty"`

	// (String) Specifies the type of object to add a tag. Allowed object types: ACCOUNT | APPLICATION | APPLICATION PACKAGE | COMPUTE POOL | DATABASE | FAILOVER GROUP | INTEGRATION | NETWORK POLICY | REPLICATION GROUP | ROLE | SHARE | USER | WAREHOUSE | DATABASE ROLE | SCHEMA | ALERT | SNOWFLAKE.CORE.BUDGET | SNOWFLAKE.ML.CLASSIFICATION | EXTERNAL FUNCTION | EXTERNAL TABLE | FUNCTION | IMAGE REPOSITORY | GIT REPOSITORY | ICEBERG TABLE | MATERIALIZED VIEW | PIPE | MASKING POLICY | PASSWORD POLICY | ROW ACCESS POLICY | SESSION POLICY | PRIVACY POLICY | PROCEDURE | SERVICE | STAGE | STREAM | TABLE | TASK | VIEW | COLUMN | EVENT TABLE.
	// Specifies the type of object to add a tag. Allowed object types: `ACCOUNT` | `APPLICATION` | `APPLICATION PACKAGE` | `COMPUTE POOL` | `DATABASE` | `FAILOVER GROUP` | `INTEGRATION` | `NETWORK POLICY` | `REPLICATION GROUP` | `ROLE` | `SHARE` | `USER` | `WAREHOUSE` | `DATABASE ROLE` | `SCHEMA` | `ALERT` | `SNOWFLAKE.CORE.BUDGET` | `SNOWFLAKE.ML.CLASSIFICATION` | `EXTERNAL FUNCTION` | `EXTERNAL TABLE` | `FUNCTION` | `IMAGE REPOSITORY` | `GIT REPOSITORY` | `ICEBERG TABLE` | `MATERIALIZED VIEW` | `PIPE` | `MASKING POLICY` | `PASSWORD POLICY` | `ROW ACCESS POLICY` | `SESSION POLICY` | `PRIVACY POLICY` | `PROCEDURE` | `SERVICE` | `STAGE` | `STREAM` | `TABLE` | `TASK` | `VIEW` | `COLUMN` | `EVENT TABLE`.
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`

	// (Boolean) (Default: true) If true, skips validation of the tag association.
	// (Default: `true`) If true, skips validation of the tag association.
	// +kubebuilder:validation:Optional
	SkipValidation *bool `json:"skipValidation,omitempty" tf:"skip_validation,omitempty"`

	// (String) Specifies the identifier for the tag.
	// Specifies the identifier for the tag.
	// +kubebuilder:validation:Optional
	TagID *string `json:"tagId,omitempty" tf:"tag_id,omitempty"`

	// (String) Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	// Specifies the value of the tag, (e.g. 'finance' or 'engineering')
	// +kubebuilder:validation:Optional
	TagValue *string `json:"tagValue,omitempty" tf:"tag_value,omitempty"`
}

// AssociationSpec defines the desired state of Association
type AssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AssociationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AssociationInitParameters `json:"initProvider,omitempty"`
}

// AssociationStatus defines the observed state of Association.
type AssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Association is the Schema for the Associations API. Resource used to manage tag associations. For more information, check object tagging documentation https://docs.snowflake.com/en/user-guide/object-tagging.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Association struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.objectIdentifiers) || (has(self.initProvider) && has(self.initProvider.objectIdentifiers))",message="spec.forProvider.objectIdentifiers is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.objectType) || (has(self.initProvider) && has(self.initProvider.objectType))",message="spec.forProvider.objectType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tagId) || (has(self.initProvider) && has(self.initProvider.tagId))",message="spec.forProvider.tagId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tagValue) || (has(self.initProvider) && has(self.initProvider.tagValue))",message="spec.forProvider.tagValue is a required parameter"
	Spec   AssociationSpec   `json:"spec"`
	Status AssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AssociationList contains a list of Associations
type AssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Association `json:"items"`
}

// Repository type metadata.
var (
	Association_Kind             = "Association"
	Association_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Association_Kind}.String()
	Association_KindAPIVersion   = Association_Kind + "." + CRDGroupVersion.String()
	Association_GroupVersionKind = CRDGroupVersion.WithKind(Association_Kind)
)

func init() {
	SchemeBuilder.Register(&Association{}, &AssociationList{})
}
