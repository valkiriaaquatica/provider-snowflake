// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ArgumentInitParameters struct {

	// (String) Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The argument name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The argument type. VECTOR data types are not yet supported. For more information about data types, check Snowflake docs.
	// The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ArgumentObservation struct {

	// (String) Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The argument name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The argument type. VECTOR data types are not yet supported. For more information about data types, check Snowflake docs.
	// The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ArgumentParameters struct {

	// (String) Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The argument name
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The argument type. VECTOR data types are not yet supported. For more information about data types, check Snowflake docs.
	// The argument type. VECTOR data types are not yet supported. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type DescribeOutputInitParameters struct {
}

type DescribeOutputObservation struct {

	// (String) Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (String) Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	ReturnType *string `json:"returnType,omitempty" tf:"return_type,omitempty"`

	// (List of Object) (see below for nested schema)
	Signature []SignatureObservation `json:"signature,omitempty" tf:"signature,omitempty"`
}

type DescribeOutputParameters struct {
}

type PolicyInitParameters struct {

	// (Block List, Min: 1) List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy. (see below for nested schema)
	// List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy.
	Argument []ArgumentInitParameters `json:"argument,omitempty" tf:"argument,omitempty"`

	// (String) Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	// Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (String) Specifies a comment for the masking policy.
	// Specifies a comment for the masking policy.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the masking policy. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ExemptOtherPolicies *string `json:"exemptOtherPolicies,omitempty" tf:"exempt_other_policies,omitempty"`

	// (String) Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check Snowflake docs.
	// The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
	ReturnDataType *string `json:"returnDataType,omitempty" tf:"return_data_type,omitempty"`

	// (String) The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the masking policy. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type PolicyObservation struct {

	// (Block List, Min: 1) List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy. (see below for nested schema)
	// List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy.
	Argument []ArgumentObservation `json:"argument,omitempty" tf:"argument,omitempty"`

	// (String) Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	// Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (String) Specifies a comment for the masking policy.
	// Specifies a comment for the masking policy.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the masking policy. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (List of Object) Outputs the result of DESCRIBE MASKING POLICY for the given masking policy. (see below for nested schema)
	// Outputs the result of `DESCRIBE MASKING POLICY` for the given masking policy.
	DescribeOutput []DescribeOutputObservation `json:"describeOutput,omitempty" tf:"describe_output,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ExemptOtherPolicies *string `json:"exemptOtherPolicies,omitempty" tf:"exempt_other_policies,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check Snowflake docs.
	// The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
	ReturnDataType *string `json:"returnDataType,omitempty" tf:"return_data_type,omitempty"`

	// (String) The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the masking policy. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (List of Object) Outputs the result of SHOW MASKING POLICIES for the given masking policy. (see below for nested schema)
	// Outputs the result of `SHOW MASKING POLICIES` for the given masking policy.
	ShowOutput []ShowOutputObservation `json:"showOutput,omitempty" tf:"show_output,omitempty"`
}

type PolicyParameters struct {

	// (Block List, Min: 1) List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy. (see below for nested schema)
	// List of the arguments for the masking policy. The first column and its data type always indicate the column data type values to mask or tokenize in the subsequent policy conditions. Note that you can not specify a virtual column as the first column argument in a conditional masking policy.
	// +kubebuilder:validation:Optional
	Argument []ArgumentParameters `json:"argument,omitempty" tf:"argument,omitempty"`

	// (String) Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	// Specifies the SQL expression that transforms the data. To mitigate permadiff on this field, the provider replaces blank characters with a space. This can lead to false positives in cases where a change in case or run of whitespace is semantically significant.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// (String) Specifies a comment for the masking policy.
	// Specifies a comment for the masking policy.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) The database in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the masking policy. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	// +kubebuilder:validation:Optional
	ExemptOtherPolicies *string `json:"exemptOtherPolicies,omitempty" tf:"exempt_other_policies,omitempty"`

	// (String) Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check Snowflake docs.
	// The return data type must match the input data type of the first column that is specified as an input column. For more information about data types, check [Snowflake docs](https://docs.snowflake.com/en/sql-reference/intro-summary-data-types).
	// +kubebuilder:validation:Optional
	ReturnDataType *string `json:"returnDataType,omitempty" tf:"return_data_type,omitempty"`

	// (String) The schema in which to create the masking policy. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the masking policy. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type ShowOutputInitParameters struct {
}

type ShowOutputObservation struct {

	// (String) Specifies a comment for the masking policy.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String)
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether the row access policy or conditional masking policy can reference a column that is already protected by a masking policy. Due to Snowflake limitations, when value is changed, the resource is recreated. Available options are: "true" or "false". When the value is not set in the configuration the provider will put "default" there which means to use the Snowflake default for this value.
	ExemptOtherPolicies *bool `json:"exemptOtherPolicies,omitempty" tf:"exempt_other_policies,omitempty"`

	// (String)
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// (String) Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (String)
	OwnerRoleType *string `json:"ownerRoleType,omitempty" tf:"owner_role_type,omitempty"`

	// (String)
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`
}

type ShowOutputParameters struct {
}

type SignatureInitParameters struct {
}

type SignatureObservation struct {

	// (String) Specifies the identifier for the masking policy; must be unique for the database and schema in which the masking policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The argument type. VECTOR data types are not yet supported. For more information about data types, check Snowflake docs.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SignatureParameters struct {
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyInitParameters `json:"initProvider,omitempty"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Policy is the Schema for the Policys API. Resource used to manage masking policies. For more information, check masking policies documentation https://docs.snowflake.com/en/sql-reference/sql/create-masking-policy.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.argument) || (has(self.initProvider) && has(self.initProvider.argument))",message="spec.forProvider.argument is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.body) || (has(self.initProvider) && has(self.initProvider.body))",message="spec.forProvider.body is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.database) || (has(self.initProvider) && has(self.initProvider.database))",message="spec.forProvider.database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.returnDataType) || (has(self.initProvider) && has(self.initProvider.returnDataType))",message="spec.forProvider.returnDataType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schema) || (has(self.initProvider) && has(self.initProvider.schema))",message="spec.forProvider.schema is a required parameter"
	Spec   PolicySpec   `json:"spec"`
	Status PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
