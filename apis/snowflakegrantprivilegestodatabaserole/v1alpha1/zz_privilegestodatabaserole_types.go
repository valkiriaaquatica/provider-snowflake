// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllInitParameters struct {

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	InDatabase *string `json:"inDatabase,omitempty" tf:"in_database,omitempty"`

	// (String) The fully qualified name of the schema.
	// The fully qualified name of the schema.
	InSchema *string `json:"inSchema,omitempty" tf:"in_schema,omitempty"`

	// (String) The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
	// The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
	ObjectTypePlural *string `json:"objectTypePlural,omitempty" tf:"object_type_plural,omitempty"`
}

type AllObservation struct {

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	InDatabase *string `json:"inDatabase,omitempty" tf:"in_database,omitempty"`

	// (String) The fully qualified name of the schema.
	// The fully qualified name of the schema.
	InSchema *string `json:"inSchema,omitempty" tf:"in_schema,omitempty"`

	// (String) The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
	// The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
	ObjectTypePlural *string `json:"objectTypePlural,omitempty" tf:"object_type_plural,omitempty"`
}

type AllParameters struct {

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	// +kubebuilder:validation:Optional
	InDatabase *string `json:"inDatabase,omitempty" tf:"in_database,omitempty"`

	// (String) The fully qualified name of the schema.
	// The fully qualified name of the schema.
	// +kubebuilder:validation:Optional
	InSchema *string `json:"inSchema,omitempty" tf:"in_schema,omitempty"`

	// (String) The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
	// The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
	// +kubebuilder:validation:Optional
	ObjectTypePlural *string `json:"objectTypePlural" tf:"object_type_plural,omitempty"`
}

type FutureInitParameters struct {

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	InDatabase *string `json:"inDatabase,omitempty" tf:"in_database,omitempty"`

	// (String) The fully qualified name of the schema.
	// The fully qualified name of the schema.
	InSchema *string `json:"inSchema,omitempty" tf:"in_schema,omitempty"`

	// (String) The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
	// The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | STREAMLITS | DATASETS.
	ObjectTypePlural *string `json:"objectTypePlural,omitempty" tf:"object_type_plural,omitempty"`
}

type FutureObservation struct {

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	InDatabase *string `json:"inDatabase,omitempty" tf:"in_database,omitempty"`

	// (String) The fully qualified name of the schema.
	// The fully qualified name of the schema.
	InSchema *string `json:"inSchema,omitempty" tf:"in_schema,omitempty"`

	// (String) The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
	// The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | STREAMLITS | DATASETS.
	ObjectTypePlural *string `json:"objectTypePlural,omitempty" tf:"object_type_plural,omitempty"`
}

type FutureParameters struct {

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	// +kubebuilder:validation:Optional
	InDatabase *string `json:"inDatabase,omitempty" tf:"in_database,omitempty"`

	// (String) The fully qualified name of the schema.
	// The fully qualified name of the schema.
	// +kubebuilder:validation:Optional
	InSchema *string `json:"inSchema,omitempty" tf:"in_schema,omitempty"`

	// (String) The plural object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICIES | ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | IMAGE REPOSITORIES | ICEBERG TABLES | MASKING POLICIES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PACKAGES POLICIES | PASSWORD POLICIES | PIPES | PROCEDURES | PROJECTION POLICIES | ROW ACCESS POLICIES | SECRETS | SERVICES | SESSION POLICIES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TAGS | TASKS | VIEWS | STREAMLITS | DATASETS.
	// The plural object type of the schema object on which privileges will be granted. Valid values are: ALERTS | AUTHENTICATION POLICIES | CORTEX SEARCH SERVICES | DATA METRIC FUNCTIONS | DYNAMIC TABLES | EVENT TABLES | EXTERNAL TABLES | FILE FORMATS | FUNCTIONS | GIT REPOSITORIES | HYBRID TABLES | ICEBERG TABLES | MATERIALIZED VIEWS | MODELS | NETWORK RULES | NOTEBOOKS | PASSWORD POLICIES | PIPES | PROCEDURES | SECRETS | SERVICES | SEQUENCES | SNAPSHOTS | STAGES | STREAMS | TABLES | TASKS | VIEWS | STREAMLITS | DATASETS.
	// +kubebuilder:validation:Optional
	ObjectTypePlural *string `json:"objectTypePlural" tf:"object_type_plural,omitempty"`
}

type OnSchemaInitParameters struct {

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	AllSchemasInDatabase *string `json:"allSchemasInDatabase,omitempty" tf:"all_schemas_in_database,omitempty"`

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	FutureSchemasInDatabase *string `json:"futureSchemasInDatabase,omitempty" tf:"future_schemas_in_database,omitempty"`

	// (String) The fully qualified name of the schema.
	// The fully qualified name of the schema.
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`
}

type OnSchemaObjectInitParameters struct {

	// (Block List, Max: 1) Configures the privilege to be granted on all objects in either a database or schema. (see below for nested schema)
	// Configures the privilege to be granted on all objects in either a database or schema.
	All []AllInitParameters `json:"all,omitempty" tf:"all,omitempty"`

	// (Block List, Max: 1) Configures the privilege to be granted on future objects in either a database or schema. (see below for nested schema)
	// Configures the privilege to be granted on future objects in either a database or schema.
	Future []FutureInitParameters `json:"future,omitempty" tf:"future,omitempty"`

	// (String) The fully qualified name of the object on which privileges will be granted.
	// The fully qualified name of the object on which privileges will be granted.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// (String) The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
	// The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`
}

type OnSchemaObjectObservation struct {

	// (Block List, Max: 1) Configures the privilege to be granted on all objects in either a database or schema. (see below for nested schema)
	// Configures the privilege to be granted on all objects in either a database or schema.
	All []AllObservation `json:"all,omitempty" tf:"all,omitempty"`

	// (Block List, Max: 1) Configures the privilege to be granted on future objects in either a database or schema. (see below for nested schema)
	// Configures the privilege to be granted on future objects in either a database or schema.
	Future []FutureObservation `json:"future,omitempty" tf:"future,omitempty"`

	// (String) The fully qualified name of the object on which privileges will be granted.
	// The fully qualified name of the object on which privileges will be granted.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// (String) The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
	// The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`
}

type OnSchemaObjectParameters struct {

	// (Block List, Max: 1) Configures the privilege to be granted on all objects in either a database or schema. (see below for nested schema)
	// Configures the privilege to be granted on all objects in either a database or schema.
	// +kubebuilder:validation:Optional
	All []AllParameters `json:"all,omitempty" tf:"all,omitempty"`

	// (Block List, Max: 1) Configures the privilege to be granted on future objects in either a database or schema. (see below for nested schema)
	// Configures the privilege to be granted on future objects in either a database or schema.
	// +kubebuilder:validation:Optional
	Future []FutureParameters `json:"future,omitempty" tf:"future,omitempty"`

	// (String) The fully qualified name of the object on which privileges will be granted.
	// The fully qualified name of the object on which privileges will be granted.
	// +kubebuilder:validation:Optional
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// (String) The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
	// The object type of the schema object on which privileges will be granted. Valid values are: AGGREGATION POLICY | ALERT | AUTHENTICATION POLICY | CORTEX SEARCH SERVICE | DATA METRIC FUNCTION | DYNAMIC TABLE | EVENT TABLE | EXTERNAL TABLE | FILE FORMAT | FUNCTION | GIT REPOSITORY | HYBRID TABLE | IMAGE REPOSITORY | ICEBERG TABLE | MASKING POLICY | MATERIALIZED VIEW | MODEL | NETWORK RULE | NOTEBOOK | PACKAGES POLICY | PASSWORD POLICY | PIPE | PROCEDURE | PROJECTION POLICY | ROW ACCESS POLICY | SECRET | SERVICE | SESSION POLICY | SEQUENCE | SNAPSHOT | STAGE | STREAM | TABLE | TAG | TASK | VIEW | STREAMLIT | DATASET
	// +kubebuilder:validation:Optional
	ObjectType *string `json:"objectType,omitempty" tf:"object_type,omitempty"`
}

type OnSchemaObservation struct {

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	AllSchemasInDatabase *string `json:"allSchemasInDatabase,omitempty" tf:"all_schemas_in_database,omitempty"`

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	FutureSchemasInDatabase *string `json:"futureSchemasInDatabase,omitempty" tf:"future_schemas_in_database,omitempty"`

	// (String) The fully qualified name of the schema.
	// The fully qualified name of the schema.
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`
}

type OnSchemaParameters struct {

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	// +kubebuilder:validation:Optional
	AllSchemasInDatabase *string `json:"allSchemasInDatabase,omitempty" tf:"all_schemas_in_database,omitempty"`

	// (String) The fully qualified name of the database.
	// The fully qualified name of the database.
	// +kubebuilder:validation:Optional
	FutureSchemasInDatabase *string `json:"futureSchemasInDatabase,omitempty" tf:"future_schemas_in_database,omitempty"`

	// (String) The fully qualified name of the schema.
	// The fully qualified name of the schema.
	// +kubebuilder:validation:Optional
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`
}

type PrivilegesToDatabaseRoleInitParameters struct {

	// (Boolean) (Default: false) Grant all privileges on the database role.
	// (Default: `false`) Grant all privileges on the database role.
	AllPrivileges *bool `json:"allPrivileges,omitempty" tf:"all_privileges,omitempty"`

	// grant defined privileges. It is supposed to be used only in “grant privileges on all X’s in database / schema Y” or “grant all privileges to X” scenarios to make sure that every new object in a given database / schema is granted by the account role and every new privilege is granted to the database role.
	// (Default: `false`) If true, the resource will always produce a “plan” and on “apply” it will re-grant defined privileges. It is supposed to be used only in “grant privileges on all X’s in database / schema Y” or “grant all privileges to X” scenarios to make sure that every new object in a given database / schema is granted by the account role and every new privilege is granted to the database role.
	AlwaysApply *bool `json:"alwaysApply,omitempty" tf:"always_apply,omitempty"`

	// (String) (Default: “) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.
	// (Default: “) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.
	AlwaysApplyTrigger *string `json:"alwaysApplyTrigger,omitempty" tf:"always_apply_trigger,omitempty"`

	// (String) The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see docs.
	// The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see [docs](./database_role).
	DatabaseRoleName *string `json:"databaseRoleName,omitempty" tf:"database_role_name,omitempty"`

	// (String) The fully qualified name of the database on which privileges will be granted. For more information about this resource, see docs.
	// The fully qualified name of the database on which privileges will be granted. For more information about this resource, see [docs](./database).
	OnDatabase *string `json:"onDatabase,omitempty" tf:"on_database,omitempty"`

	// (Block List, Max: 1) Specifies the schema on which privileges will be granted. (see below for nested schema)
	// Specifies the schema on which privileges will be granted.
	OnSchema []OnSchemaInitParameters `json:"onSchema,omitempty" tf:"on_schema,omitempty"`

	// (Block List, Max: 1) Specifies the schema object on which privileges will be granted. (see below for nested schema)
	// Specifies the schema object on which privileges will be granted.
	OnSchemaObject []OnSchemaObjectInitParameters `json:"onSchemaObject,omitempty" tf:"on_schema_object,omitempty"`

	// (Set of String) The privileges to grant on the database role.
	// The privileges to grant on the database role.
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// (Boolean) (Default: false) If specified, allows the recipient role to grant the privileges to other roles.
	// (Default: `false`) If specified, allows the recipient role to grant the privileges to other roles.
	WithGrantOption *bool `json:"withGrantOption,omitempty" tf:"with_grant_option,omitempty"`
}

type PrivilegesToDatabaseRoleObservation struct {

	// (Boolean) (Default: false) Grant all privileges on the database role.
	// (Default: `false`) Grant all privileges on the database role.
	AllPrivileges *bool `json:"allPrivileges,omitempty" tf:"all_privileges,omitempty"`

	// grant defined privileges. It is supposed to be used only in “grant privileges on all X’s in database / schema Y” or “grant all privileges to X” scenarios to make sure that every new object in a given database / schema is granted by the account role and every new privilege is granted to the database role.
	// (Default: `false`) If true, the resource will always produce a “plan” and on “apply” it will re-grant defined privileges. It is supposed to be used only in “grant privileges on all X’s in database / schema Y” or “grant all privileges to X” scenarios to make sure that every new object in a given database / schema is granted by the account role and every new privilege is granted to the database role.
	AlwaysApply *bool `json:"alwaysApply,omitempty" tf:"always_apply,omitempty"`

	// (String) (Default: “) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.
	// (Default: “) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.
	AlwaysApplyTrigger *string `json:"alwaysApplyTrigger,omitempty" tf:"always_apply_trigger,omitempty"`

	// (String) The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see docs.
	// The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see [docs](./database_role).
	DatabaseRoleName *string `json:"databaseRoleName,omitempty" tf:"database_role_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The fully qualified name of the database on which privileges will be granted. For more information about this resource, see docs.
	// The fully qualified name of the database on which privileges will be granted. For more information about this resource, see [docs](./database).
	OnDatabase *string `json:"onDatabase,omitempty" tf:"on_database,omitempty"`

	// (Block List, Max: 1) Specifies the schema on which privileges will be granted. (see below for nested schema)
	// Specifies the schema on which privileges will be granted.
	OnSchema []OnSchemaObservation `json:"onSchema,omitempty" tf:"on_schema,omitempty"`

	// (Block List, Max: 1) Specifies the schema object on which privileges will be granted. (see below for nested schema)
	// Specifies the schema object on which privileges will be granted.
	OnSchemaObject []OnSchemaObjectObservation `json:"onSchemaObject,omitempty" tf:"on_schema_object,omitempty"`

	// (Set of String) The privileges to grant on the database role.
	// The privileges to grant on the database role.
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// (Boolean) (Default: false) If specified, allows the recipient role to grant the privileges to other roles.
	// (Default: `false`) If specified, allows the recipient role to grant the privileges to other roles.
	WithGrantOption *bool `json:"withGrantOption,omitempty" tf:"with_grant_option,omitempty"`
}

type PrivilegesToDatabaseRoleParameters struct {

	// (Boolean) (Default: false) Grant all privileges on the database role.
	// (Default: `false`) Grant all privileges on the database role.
	// +kubebuilder:validation:Optional
	AllPrivileges *bool `json:"allPrivileges,omitempty" tf:"all_privileges,omitempty"`

	// grant defined privileges. It is supposed to be used only in “grant privileges on all X’s in database / schema Y” or “grant all privileges to X” scenarios to make sure that every new object in a given database / schema is granted by the account role and every new privilege is granted to the database role.
	// (Default: `false`) If true, the resource will always produce a “plan” and on “apply” it will re-grant defined privileges. It is supposed to be used only in “grant privileges on all X’s in database / schema Y” or “grant all privileges to X” scenarios to make sure that every new object in a given database / schema is granted by the account role and every new privilege is granted to the database role.
	// +kubebuilder:validation:Optional
	AlwaysApply *bool `json:"alwaysApply,omitempty" tf:"always_apply,omitempty"`

	// (String) (Default: “) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.
	// (Default: “) This is a helper field and should not be set. Its main purpose is to help to achieve the functionality described by the always_apply field.
	// +kubebuilder:validation:Optional
	AlwaysApplyTrigger *string `json:"alwaysApplyTrigger,omitempty" tf:"always_apply_trigger,omitempty"`

	// (String) The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see docs.
	// The fully qualified name of the database role to which privileges will be granted. For more information about this resource, see [docs](./database_role).
	// +kubebuilder:validation:Optional
	DatabaseRoleName *string `json:"databaseRoleName,omitempty" tf:"database_role_name,omitempty"`

	// (String) The fully qualified name of the database on which privileges will be granted. For more information about this resource, see docs.
	// The fully qualified name of the database on which privileges will be granted. For more information about this resource, see [docs](./database).
	// +kubebuilder:validation:Optional
	OnDatabase *string `json:"onDatabase,omitempty" tf:"on_database,omitempty"`

	// (Block List, Max: 1) Specifies the schema on which privileges will be granted. (see below for nested schema)
	// Specifies the schema on which privileges will be granted.
	// +kubebuilder:validation:Optional
	OnSchema []OnSchemaParameters `json:"onSchema,omitempty" tf:"on_schema,omitempty"`

	// (Block List, Max: 1) Specifies the schema object on which privileges will be granted. (see below for nested schema)
	// Specifies the schema object on which privileges will be granted.
	// +kubebuilder:validation:Optional
	OnSchemaObject []OnSchemaObjectParameters `json:"onSchemaObject,omitempty" tf:"on_schema_object,omitempty"`

	// (Set of String) The privileges to grant on the database role.
	// The privileges to grant on the database role.
	// +kubebuilder:validation:Optional
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// (Boolean) (Default: false) If specified, allows the recipient role to grant the privileges to other roles.
	// (Default: `false`) If specified, allows the recipient role to grant the privileges to other roles.
	// +kubebuilder:validation:Optional
	WithGrantOption *bool `json:"withGrantOption,omitempty" tf:"with_grant_option,omitempty"`
}

// PrivilegesToDatabaseRoleSpec defines the desired state of PrivilegesToDatabaseRole
type PrivilegesToDatabaseRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrivilegesToDatabaseRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PrivilegesToDatabaseRoleInitParameters `json:"initProvider,omitempty"`
}

// PrivilegesToDatabaseRoleStatus defines the observed state of PrivilegesToDatabaseRole.
type PrivilegesToDatabaseRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrivilegesToDatabaseRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PrivilegesToDatabaseRole is the Schema for the PrivilegesToDatabaseRoles API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type PrivilegesToDatabaseRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.databaseRoleName) || (has(self.initProvider) && has(self.initProvider.databaseRoleName))",message="spec.forProvider.databaseRoleName is a required parameter"
	Spec   PrivilegesToDatabaseRoleSpec   `json:"spec"`
	Status PrivilegesToDatabaseRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrivilegesToDatabaseRoleList contains a list of PrivilegesToDatabaseRoles
type PrivilegesToDatabaseRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrivilegesToDatabaseRole `json:"items"`
}

// Repository type metadata.
var (
	PrivilegesToDatabaseRole_Kind             = "PrivilegesToDatabaseRole"
	PrivilegesToDatabaseRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrivilegesToDatabaseRole_Kind}.String()
	PrivilegesToDatabaseRole_KindAPIVersion   = PrivilegesToDatabaseRole_Kind + "." + CRDGroupVersion.String()
	PrivilegesToDatabaseRole_GroupVersionKind = CRDGroupVersion.WithKind(PrivilegesToDatabaseRole_Kind)
)

func init() {
	SchemeBuilder.Register(&PrivilegesToDatabaseRole{}, &PrivilegesToDatabaseRoleList{})
}
