// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DescribeOutputInitParameters struct {
}

type DescribeOutputObservation struct {

	// (Set of String) Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
	AllowedIPList *string `json:"allowedIpList,omitempty" tf:"allowed_ip_list,omitempty"`

	// (Set of String) Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake. For more information about this resource, see docs.
	AllowedNetworkRuleList *string `json:"allowedNetworkRuleList,omitempty" tf:"allowed_network_rule_list,omitempty"`

	// (Set of String) Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. Do not add 0.0.0.0/0 to blocked_ip_list, in order to block all IP addresses except a select list, you only need to add IP addresses to allowed_ip_list.
	BlockedIPList *string `json:"blockedIpList,omitempty" tf:"blocked_ip_list,omitempty"`

	// (Set of String) Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake. For more information about this resource, see docs.
	BlockedNetworkRuleList *string `json:"blockedNetworkRuleList,omitempty" tf:"blocked_network_rule_list,omitempty"`
}

type DescribeOutputParameters struct {
}

type PolicyInitParameters struct {

	// (Set of String) Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
	// Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
	// +listType=set
	AllowedIPList []*string `json:"allowedIpList,omitempty" tf:"allowed_ip_list,omitempty"`

	// (Set of String) Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake. For more information about this resource, see docs.
	// Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake. For more information about this resource, see [docs](./network_rule).
	// +listType=set
	AllowedNetworkRuleList []*string `json:"allowedNetworkRuleList,omitempty" tf:"allowed_network_rule_list,omitempty"`

	// (Set of String) Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. Do not add 0.0.0.0/0 to blocked_ip_list, in order to block all IP addresses except a select list, you only need to add IP addresses to allowed_ip_list.
	// Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.
	// +listType=set
	BlockedIPList []*string `json:"blockedIpList,omitempty" tf:"blocked_ip_list,omitempty"`

	// (Set of String) Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake. For more information about this resource, see docs.
	// Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake. For more information about this resource, see [docs](./network_rule).
	// +listType=set
	BlockedNetworkRuleList []*string `json:"blockedNetworkRuleList,omitempty" tf:"blocked_network_rule_list,omitempty"`

	// (String) Specifies a comment for the network policy.
	// Specifies a comment for the network policy.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PolicyObservation struct {

	// (Set of String) Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
	// Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
	// +listType=set
	AllowedIPList []*string `json:"allowedIpList,omitempty" tf:"allowed_ip_list,omitempty"`

	// (Set of String) Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake. For more information about this resource, see docs.
	// Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake. For more information about this resource, see [docs](./network_rule).
	// +listType=set
	AllowedNetworkRuleList []*string `json:"allowedNetworkRuleList,omitempty" tf:"allowed_network_rule_list,omitempty"`

	// (Set of String) Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. Do not add 0.0.0.0/0 to blocked_ip_list, in order to block all IP addresses except a select list, you only need to add IP addresses to allowed_ip_list.
	// Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.
	// +listType=set
	BlockedIPList []*string `json:"blockedIpList,omitempty" tf:"blocked_ip_list,omitempty"`

	// (Set of String) Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake. For more information about this resource, see docs.
	// Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake. For more information about this resource, see [docs](./network_rule).
	// +listType=set
	BlockedNetworkRuleList []*string `json:"blockedNetworkRuleList,omitempty" tf:"blocked_network_rule_list,omitempty"`

	// (String) Specifies a comment for the network policy.
	// Specifies a comment for the network policy.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (List of Object) Outputs the result of DESCRIBE NETWORK POLICY for the given network policy. (see below for nested schema)
	// Outputs the result of `DESCRIBE NETWORK POLICY` for the given network policy.
	DescribeOutput []DescribeOutputObservation `json:"describeOutput,omitempty" tf:"describe_output,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of Object) Outputs the result of SHOW NETWORK POLICIES for the given network policy. (see below for nested schema)
	// Outputs the result of `SHOW NETWORK POLICIES` for the given network policy.
	ShowOutput []ShowOutputObservation `json:"showOutput,omitempty" tf:"show_output,omitempty"`
}

type PolicyParameters struct {

	// (Set of String) Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
	// Specifies one or more IPv4 addresses (CIDR notation) that are allowed access to your Snowflake account.
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowedIPList []*string `json:"allowedIpList,omitempty" tf:"allowed_ip_list,omitempty"`

	// (Set of String) Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake. For more information about this resource, see docs.
	// Specifies a list of fully qualified network rules that contain the network identifiers that are allowed access to Snowflake. For more information about this resource, see [docs](./network_rule).
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowedNetworkRuleList []*string `json:"allowedNetworkRuleList,omitempty" tf:"allowed_network_rule_list,omitempty"`

	// (Set of String) Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. Do not add 0.0.0.0/0 to blocked_ip_list, in order to block all IP addresses except a select list, you only need to add IP addresses to allowed_ip_list.
	// Specifies one or more IPv4 addresses (CIDR notation) that are denied access to your Snowflake account. **Do not** add `0.0.0.0/0` to `blocked_ip_list`, in order to block all IP addresses except a select list, you only need to add IP addresses to `allowed_ip_list`.
	// +kubebuilder:validation:Optional
	// +listType=set
	BlockedIPList []*string `json:"blockedIpList,omitempty" tf:"blocked_ip_list,omitempty"`

	// (Set of String) Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake. For more information about this resource, see docs.
	// Specifies a list of fully qualified network rules that contain the network identifiers that are denied access to Snowflake. For more information about this resource, see [docs](./network_rule).
	// +kubebuilder:validation:Optional
	// +listType=set
	BlockedNetworkRuleList []*string `json:"blockedNetworkRuleList,omitempty" tf:"blocked_network_rule_list,omitempty"`

	// (String) Specifies a comment for the network policy.
	// Specifies a comment for the network policy.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ShowOutputInitParameters struct {
}

type ShowOutputObservation struct {

	// (String) Specifies a comment for the network policy.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (Number)
	EntriesInAllowedIPList *float64 `json:"entriesInAllowedIpList,omitempty" tf:"entries_in_allowed_ip_list,omitempty"`

	// (Number)
	EntriesInAllowedNetworkRules *float64 `json:"entriesInAllowedNetworkRules,omitempty" tf:"entries_in_allowed_network_rules,omitempty"`

	// (Number)
	EntriesInBlockedIPList *float64 `json:"entriesInBlockedIpList,omitempty" tf:"entries_in_blocked_ip_list,omitempty"`

	// (Number)
	EntriesInBlockedNetworkRules *float64 `json:"entriesInBlockedNetworkRules,omitempty" tf:"entries_in_blocked_network_rules,omitempty"`

	// (String) Specifies the identifier for the network policy; must be unique for the account in which the network policy is created. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ShowOutputParameters struct {
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyInitParameters `json:"initProvider,omitempty"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Policy is the Schema for the Policys API. Resource used to control network traffic. For more information, check an official guide https://docs.snowflake.com/en/user-guide/network-policies on controlling network traffic with network policies.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PolicySpec   `json:"spec"`
	Status PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
