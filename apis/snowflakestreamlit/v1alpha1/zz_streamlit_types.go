// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DescribeOutputInitParameters struct {
}

type DescribeOutputObservation struct {

	// (String)
	DefaultPackages *string `json:"defaultPackages,omitempty" tf:"default_packages,omitempty"`

	// (Set of String) External access integrations connected to the Streamlit.
	// +listType=set
	ExternalAccessIntegrations []*string `json:"externalAccessIntegrations,omitempty" tf:"external_access_integrations,omitempty"`

	// (String)
	ExternalAccessSecrets *string `json:"externalAccessSecrets,omitempty" tf:"external_access_secrets,omitempty"`

	// (Set of String)
	// +listType=set
	ImportUrls []*string `json:"importUrls,omitempty" tf:"import_urls,omitempty"`

	// (String) Specifies the filename of the Streamlit Python application. This filename is relative to the value of directory_location
	MainFile *string `json:"mainFile,omitempty" tf:"main_file,omitempty"`

	// (String) String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// cased letters. For more information about this resource, see docs.
	QueryWarehouse *string `json:"queryWarehouse,omitempty" tf:"query_warehouse,omitempty"`

	// (String)
	RootLocation *string `json:"rootLocation,omitempty" tf:"root_location,omitempty"`

	// (String) Specifies a title for the Streamlit app to display in Snowsight.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String)
	URLID *string `json:"urlId,omitempty" tf:"url_id,omitempty"`

	// (Set of String)
	// +listType=set
	UserPackages []*string `json:"userPackages,omitempty" tf:"user_packages,omitempty"`
}

type DescribeOutputParameters struct {
}

type ShowOutputInitParameters struct {
}

type ShowOutputObservation struct {

	// (String) Specifies a comment for the streamlit.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String)
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	// (String) String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (String)
	OwnerRoleType *string `json:"ownerRoleType,omitempty" tf:"owner_role_type,omitempty"`

	// cased letters. For more information about this resource, see docs.
	QueryWarehouse *string `json:"queryWarehouse,omitempty" tf:"query_warehouse,omitempty"`

	// (String)
	SchemaName *string `json:"schemaName,omitempty" tf:"schema_name,omitempty"`

	// (String) Specifies a title for the Streamlit app to display in Snowsight.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	// (String)
	URLID *string `json:"urlId,omitempty" tf:"url_id,omitempty"`
}

type ShowOutputParameters struct {
}

type StreamlitInitParameters struct {

	// (String) Specifies a comment for the streamlit.
	// Specifies a comment for the streamlit.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the streamlit Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
	// Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
	DirectoryLocation *string `json:"directoryLocation,omitempty" tf:"directory_location,omitempty"`

	// (Set of String) External access integrations connected to the Streamlit.
	// External access integrations connected to the Streamlit.
	// +listType=set
	ExternalAccessIntegrations []*string `json:"externalAccessIntegrations,omitempty" tf:"external_access_integrations,omitempty"`

	// (String) Specifies the filename of the Streamlit Python application. This filename is relative to the value of directory_location
	// Specifies the filename of the Streamlit Python application. This filename is relative to the value of `directory_location`
	MainFile *string `json:"mainFile,omitempty" tf:"main_file,omitempty"`

	// (String) String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// cased letters. For more information about this resource, see docs.
	// Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. For more information about this resource, see [docs](./warehouse).
	QueryWarehouse *string `json:"queryWarehouse,omitempty" tf:"query_warehouse,omitempty"`

	// (String) The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the streamlit. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) The stage in which streamlit files are located. For more information about this resource, see docs.
	// The stage in which streamlit files are located. For more information about this resource, see [docs](./stage).
	Stage *string `json:"stage,omitempty" tf:"stage,omitempty"`

	// (String) Specifies a title for the Streamlit app to display in Snowsight.
	// Specifies a title for the Streamlit app to display in Snowsight.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type StreamlitObservation struct {

	// (String) Specifies a comment for the streamlit.
	// Specifies a comment for the streamlit.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the streamlit Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (List of Object) Outputs the result of DESCRIBE STREAMLIT for the given streamlit. (see below for nested schema)
	// Outputs the result of `DESCRIBE STREAMLIT` for the given streamlit.
	DescribeOutput []DescribeOutputObservation `json:"describeOutput,omitempty" tf:"describe_output,omitempty"`

	// (String) Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
	// Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
	DirectoryLocation *string `json:"directoryLocation,omitempty" tf:"directory_location,omitempty"`

	// (Set of String) External access integrations connected to the Streamlit.
	// External access integrations connected to the Streamlit.
	// +listType=set
	ExternalAccessIntegrations []*string `json:"externalAccessIntegrations,omitempty" tf:"external_access_integrations,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Specifies the filename of the Streamlit Python application. This filename is relative to the value of directory_location
	// Specifies the filename of the Streamlit Python application. This filename is relative to the value of `directory_location`
	MainFile *string `json:"mainFile,omitempty" tf:"main_file,omitempty"`

	// (String) String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// cased letters. For more information about this resource, see docs.
	// Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. For more information about this resource, see [docs](./warehouse).
	QueryWarehouse *string `json:"queryWarehouse,omitempty" tf:"query_warehouse,omitempty"`

	// (String) The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the streamlit. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (List of Object) Outputs the result of SHOW STREAMLIT for the given streamlit. (see below for nested schema)
	// Outputs the result of `SHOW STREAMLIT` for the given streamlit.
	ShowOutput []ShowOutputObservation `json:"showOutput,omitempty" tf:"show_output,omitempty"`

	// (String) The stage in which streamlit files are located. For more information about this resource, see docs.
	// The stage in which streamlit files are located. For more information about this resource, see [docs](./stage).
	Stage *string `json:"stage,omitempty" tf:"stage,omitempty"`

	// (String) Specifies a title for the Streamlit app to display in Snowsight.
	// Specifies a title for the Streamlit app to display in Snowsight.
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type StreamlitParameters struct {

	// (String) Specifies a comment for the streamlit.
	// Specifies a comment for the streamlit.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) The database in which to create the streamlit Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The database in which to create the streamlit Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
	// Specifies the full path to the named stage containing the Streamlit Python files, media files, and the environment.yml file.
	// +kubebuilder:validation:Optional
	DirectoryLocation *string `json:"directoryLocation,omitempty" tf:"directory_location,omitempty"`

	// (Set of String) External access integrations connected to the Streamlit.
	// External access integrations connected to the Streamlit.
	// +kubebuilder:validation:Optional
	// +listType=set
	ExternalAccessIntegrations []*string `json:"externalAccessIntegrations,omitempty" tf:"external_access_integrations,omitempty"`

	// (String) Specifies the filename of the Streamlit Python application. This filename is relative to the value of directory_location
	// Specifies the filename of the Streamlit Python application. This filename is relative to the value of `directory_location`
	// +kubebuilder:validation:Optional
	MainFile *string `json:"mainFile,omitempty" tf:"main_file,omitempty"`

	// (String) String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// String that specifies the identifier (i.e. name) for the streamlit; must be unique in your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// cased letters. For more information about this resource, see docs.
	// Specifies the warehouse where SQL queries issued by the Streamlit application are run. Due to Snowflake limitations warehouse identifier can consist of only upper-cased letters. For more information about this resource, see [docs](./warehouse).
	// +kubebuilder:validation:Optional
	QueryWarehouse *string `json:"queryWarehouse,omitempty" tf:"query_warehouse,omitempty"`

	// (String) The schema in which to create the streamlit. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// The schema in which to create the streamlit. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) The stage in which streamlit files are located. For more information about this resource, see docs.
	// The stage in which streamlit files are located. For more information about this resource, see [docs](./stage).
	// +kubebuilder:validation:Optional
	Stage *string `json:"stage,omitempty" tf:"stage,omitempty"`

	// (String) Specifies a title for the Streamlit app to display in Snowsight.
	// Specifies a title for the Streamlit app to display in Snowsight.
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

// StreamlitSpec defines the desired state of Streamlit
type StreamlitSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StreamlitParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StreamlitInitParameters `json:"initProvider,omitempty"`
}

// StreamlitStatus defines the observed state of Streamlit.
type StreamlitStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StreamlitObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Streamlit is the Schema for the Streamlits API. Resource used to manage streamlits objects. For more information, check streamlit documentation https://docs.snowflake.com/en/sql-reference/commands-streamlit.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Streamlit struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.database) || (has(self.initProvider) && has(self.initProvider.database))",message="spec.forProvider.database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mainFile) || (has(self.initProvider) && has(self.initProvider.mainFile))",message="spec.forProvider.mainFile is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schema) || (has(self.initProvider) && has(self.initProvider.schema))",message="spec.forProvider.schema is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.stage) || (has(self.initProvider) && has(self.initProvider.stage))",message="spec.forProvider.stage is a required parameter"
	Spec   StreamlitSpec   `json:"spec"`
	Status StreamlitStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StreamlitList contains a list of Streamlits
type StreamlitList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Streamlit `json:"items"`
}

// Repository type metadata.
var (
	Streamlit_Kind             = "Streamlit"
	Streamlit_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Streamlit_Kind}.String()
	Streamlit_KindAPIVersion   = Streamlit_Kind + "." + CRDGroupVersion.String()
	Streamlit_GroupVersionKind = CRDGroupVersion.WithKind(Streamlit_Kind)
)

func init() {
	SchemeBuilder.Register(&Streamlit{}, &StreamlitList{})
}
