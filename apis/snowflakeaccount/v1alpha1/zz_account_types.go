// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountInitParameters struct {

	// insensitive. External changes for this field won't be detected.
	// Login name of the initial administrative user of the account. A new user is created in the new account with this name and password and granted the ACCOUNTADMIN role in the account. A login name can be any string consisting of letters, numbers, and underscores. Login names are always case-insensitive. External changes for this field won't be detected.
	AdminNameSecretRef v1.SecretKeySelector `json:"adminNameSecretRef" tf:"-"`

	// Password for the initial administrative user of the account. Either admin_password or admin_rsa_public_key has to be specified. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// Assigns a public key to the initial administrative user of the account. Either admin_password or admin_rsa_public_key has to be specified. External changes for this field won't be detected.
	AdminRsaPublicKey *string `json:"adminRsaPublicKey,omitempty" tf:"admin_rsa_public_key,omitempty"`

	// Used for setting the type of the first user that is assigned the ACCOUNTADMIN role during account creation. Valid options are: `PERSON` | `SERVICE` | `LEGACY_SERVICE` External changes for this field won't be detected.
	AdminUserType *string `json:"adminUserType,omitempty" tf:"admin_user_type,omitempty"`

	// (String) Specifies a comment for the account.
	// Specifies a comment for the account.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// based billing.
	// Determines which billing entity is responsible for the account's consumption-based billing.
	ConsumptionBillingEntity *string `json:"consumptionBillingEntity,omitempty" tf:"consumption_billing_entity,omitempty"`

	// (String) Snowflake Edition of the account. See more about Snowflake Editions in the official documentation. Valid options are: STANDARD | ENTERPRISE | BUSINESS_CRITICAL
	// Snowflake Edition of the account. See more about Snowflake Editions in the [official documentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` | `BUSINESS_CRITICAL`
	Edition *string `json:"edition,omitempty" tf:"edition,omitempty"`

	// Email address of the initial administrative user of the account. This email address is used to send any notifications about the account. External changes for this field won't be detected.
	EmailSecretRef v1.SecretKeySelector `json:"emailSecretRef" tf:"-"`

	// First name of the initial administrative user of the account. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	FirstNameSecretRef *v1.SecretKeySelector `json:"firstNameSecretRef,omitempty" tf:"-"`

	// (Number) Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.
	// Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.
	GracePeriodInDays *float64 `json:"gracePeriodInDays,omitempty" tf:"grace_period_in_days,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
	IsOrgAdmin *string `json:"isOrgAdmin,omitempty" tf:"is_org_admin,omitempty"`

	// Last name of the initial administrative user of the account. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	LastNameSecretRef *v1.SecretKeySelector `json:"lastNameSecretRef,omitempty" tf:"-"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether the new user created to administer the account is forced to change their password upon first login into the account. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the new user created to administer the account is forced to change their password upon first login into the account. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	MustChangePassword *string `json:"mustChangePassword,omitempty" tf:"must_change_password,omitempty"`

	// ) for the underscores.
	// Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which Snowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Snowflake Region ID of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
	// [Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids) of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the SHOW REGIONS command. For information about when you might need to specify region group, see Region groups.
	// ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For information about when you might need to specify region group, see [Region groups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).
	RegionGroup *string `json:"regionGroup,omitempty" tf:"region_group,omitempty"`
}

type AccountObservation struct {

	// Assigns a public key to the initial administrative user of the account. Either admin_password or admin_rsa_public_key has to be specified. External changes for this field won't be detected.
	AdminRsaPublicKey *string `json:"adminRsaPublicKey,omitempty" tf:"admin_rsa_public_key,omitempty"`

	// Used for setting the type of the first user that is assigned the ACCOUNTADMIN role during account creation. Valid options are: `PERSON` | `SERVICE` | `LEGACY_SERVICE` External changes for this field won't be detected.
	AdminUserType *string `json:"adminUserType,omitempty" tf:"admin_user_type,omitempty"`

	// (String) Specifies a comment for the account.
	// Specifies a comment for the account.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// based billing.
	// Determines which billing entity is responsible for the account's consumption-based billing.
	ConsumptionBillingEntity *string `json:"consumptionBillingEntity,omitempty" tf:"consumption_billing_entity,omitempty"`

	// (String) Snowflake Edition of the account. See more about Snowflake Editions in the official documentation. Valid options are: STANDARD | ENTERPRISE | BUSINESS_CRITICAL
	// Snowflake Edition of the account. See more about Snowflake Editions in the [official documentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` | `BUSINESS_CRITICAL`
	Edition *string `json:"edition,omitempty" tf:"edition,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (Number) Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.
	// Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.
	GracePeriodInDays *float64 `json:"gracePeriodInDays,omitempty" tf:"grace_period_in_days,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
	IsOrgAdmin *string `json:"isOrgAdmin,omitempty" tf:"is_org_admin,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether the new user created to administer the account is forced to change their password upon first login into the account. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the new user created to administer the account is forced to change their password upon first login into the account. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	MustChangePassword *string `json:"mustChangePassword,omitempty" tf:"must_change_password,omitempty"`

	// ) for the underscores.
	// Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which Snowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Snowflake Region ID of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
	// [Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids) of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the SHOW REGIONS command. For information about when you might need to specify region group, see Region groups.
	// ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For information about when you might need to specify region group, see [Region groups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).
	RegionGroup *string `json:"regionGroup,omitempty" tf:"region_group,omitempty"`

	// (List of Object) Outputs the result of SHOW ACCOUNTS for the given account. (see below for nested schema)
	// Outputs the result of `SHOW ACCOUNTS` for the given account.
	ShowOutput []ShowOutputObservation `json:"showOutput,omitempty" tf:"show_output,omitempty"`
}

type AccountParameters struct {

	// insensitive. External changes for this field won't be detected.
	// Login name of the initial administrative user of the account. A new user is created in the new account with this name and password and granted the ACCOUNTADMIN role in the account. A login name can be any string consisting of letters, numbers, and underscores. Login names are always case-insensitive. External changes for this field won't be detected.
	// +kubebuilder:validation:Optional
	AdminNameSecretRef v1.SecretKeySelector `json:"adminNameSecretRef" tf:"-"`

	// Password for the initial administrative user of the account. Either admin_password or admin_rsa_public_key has to be specified. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	// +kubebuilder:validation:Optional
	AdminPasswordSecretRef *v1.SecretKeySelector `json:"adminPasswordSecretRef,omitempty" tf:"-"`

	// Assigns a public key to the initial administrative user of the account. Either admin_password or admin_rsa_public_key has to be specified. External changes for this field won't be detected.
	// +kubebuilder:validation:Optional
	AdminRsaPublicKey *string `json:"adminRsaPublicKey,omitempty" tf:"admin_rsa_public_key,omitempty"`

	// Used for setting the type of the first user that is assigned the ACCOUNTADMIN role during account creation. Valid options are: `PERSON` | `SERVICE` | `LEGACY_SERVICE` External changes for this field won't be detected.
	// +kubebuilder:validation:Optional
	AdminUserType *string `json:"adminUserType,omitempty" tf:"admin_user_type,omitempty"`

	// (String) Specifies a comment for the account.
	// Specifies a comment for the account.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// based billing.
	// Determines which billing entity is responsible for the account's consumption-based billing.
	// +kubebuilder:validation:Optional
	ConsumptionBillingEntity *string `json:"consumptionBillingEntity,omitempty" tf:"consumption_billing_entity,omitempty"`

	// (String) Snowflake Edition of the account. See more about Snowflake Editions in the official documentation. Valid options are: STANDARD | ENTERPRISE | BUSINESS_CRITICAL
	// Snowflake Edition of the account. See more about Snowflake Editions in the [official documentation](https://docs.snowflake.com/en/user-guide/intro-editions). Valid options are: `STANDARD` | `ENTERPRISE` | `BUSINESS_CRITICAL`
	// +kubebuilder:validation:Optional
	Edition *string `json:"edition,omitempty" tf:"edition,omitempty"`

	// Email address of the initial administrative user of the account. This email address is used to send any notifications about the account. External changes for this field won't be detected.
	// +kubebuilder:validation:Optional
	EmailSecretRef v1.SecretKeySelector `json:"emailSecretRef" tf:"-"`

	// First name of the initial administrative user of the account. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	// +kubebuilder:validation:Optional
	FirstNameSecretRef *v1.SecretKeySelector `json:"firstNameSecretRef,omitempty" tf:"-"`

	// (Number) Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.
	// Specifies the number of days during which the account can be restored (“undropped”). The minimum is 3 days and the maximum is 90 days.
	// +kubebuilder:validation:Optional
	GracePeriodInDays *float64 `json:"gracePeriodInDays,omitempty" tf:"grace_period_in_days,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
	// +kubebuilder:validation:Optional
	IsOrgAdmin *string `json:"isOrgAdmin,omitempty" tf:"is_org_admin,omitempty"`

	// Last name of the initial administrative user of the account. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	// +kubebuilder:validation:Optional
	LastNameSecretRef *v1.SecretKeySelector `json:"lastNameSecretRef,omitempty" tf:"-"`

	// uses special value that cannot be set in the configuration manually (default)) Specifies whether the new user created to administer the account is forced to change their password upon first login into the account. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	// (Default: fallback to Snowflake default - uses special value that cannot be set in the configuration manually (`default`)) Specifies whether the new user created to administer the account is forced to change their password upon first login into the account. This field cannot be used whenever admin_user_type is set to SERVICE. External changes for this field won't be detected.
	// +kubebuilder:validation:Optional
	MustChangePassword *string `json:"mustChangePassword,omitempty" tf:"must_change_password,omitempty"`

	// ) for the underscores.
	// Specifies the identifier (i.e. name) for the account. It must be unique within an organization, regardless of which Snowflake Region the account is in and must start with an alphabetic character and cannot contain spaces or special characters except for underscores (_). Note that if the account name includes underscores, features that do not accept account names with underscores (e.g. Okta SSO or SCIM) can reference a version of the account name that substitutes hyphens (-) for the underscores.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Snowflake Region ID of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
	// [Snowflake Region ID](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-snowflake-region-ids) of the region where the account is created. If no value is provided, Snowflake creates the account in the same Snowflake Region as the current account (i.e. the account in which the CREATE ACCOUNT statement is executed.)
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// (String) ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the SHOW REGIONS command. For information about when you might need to specify region group, see Region groups.
	// ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the [SHOW REGIONS](https://docs.snowflake.com/en/sql-reference/sql/show-regions) command. For information about when you might need to specify region group, see [Region groups](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#label-region-groups).
	// +kubebuilder:validation:Optional
	RegionGroup *string `json:"regionGroup,omitempty" tf:"region_group,omitempty"`
}

type ShowOutputInitParameters struct {
}

type ShowOutputObservation struct {

	// (String)
	AccountLocator *string `json:"accountLocator,omitempty" tf:"account_locator,omitempty"`

	// (String)
	AccountLocatorURL *string `json:"accountLocatorUrl,omitempty" tf:"account_locator_url,omitempty"`

	// (String)
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// (String)
	AccountOldURLLastUsed *string `json:"accountOldUrlLastUsed,omitempty" tf:"account_old_url_last_used,omitempty"`

	// (String)
	AccountOldURLSavedOn *string `json:"accountOldUrlSavedOn,omitempty" tf:"account_old_url_saved_on,omitempty"`

	// (String)
	AccountURL *string `json:"accountUrl,omitempty" tf:"account_url,omitempty"`

	// (String) Specifies a comment for the account.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	ConsumptionBillingEntityName *string `json:"consumptionBillingEntityName,omitempty" tf:"consumption_billing_entity_name,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (String)
	DroppedOn *string `json:"droppedOn,omitempty" tf:"dropped_on,omitempty"`

	// (String) Snowflake Edition of the account. See more about Snowflake Editions in the official documentation. Valid options are: STANDARD | ENTERPRISE | BUSINESS_CRITICAL
	Edition *string `json:"edition,omitempty" tf:"edition,omitempty"`

	// (Boolean)
	IsEventsAccount *bool `json:"isEventsAccount,omitempty" tf:"is_events_account,omitempty"`

	// uses special value that cannot be set in the configuration manually (default)) Sets an account property that determines whether the ORGADMIN role is enabled in the account. Only an organization administrator (i.e. user with the ORGADMIN role) can set the property.
	IsOrgAdmin *bool `json:"isOrgAdmin,omitempty" tf:"is_org_admin,omitempty"`

	// (Boolean)
	IsOrganizationAccount *bool `json:"isOrganizationAccount,omitempty" tf:"is_organization_account,omitempty"`

	// (Number)
	ManagedAccounts *float64 `json:"managedAccounts,omitempty" tf:"managed_accounts,omitempty"`

	// (String)
	MarketplaceConsumerBillingEntityName *string `json:"marketplaceConsumerBillingEntityName,omitempty" tf:"marketplace_consumer_billing_entity_name,omitempty"`

	// (String)
	MarketplaceProviderBillingEntityName *string `json:"marketplaceProviderBillingEntityName,omitempty" tf:"marketplace_provider_billing_entity_name,omitempty"`

	// (String)
	MovedOn *string `json:"movedOn,omitempty" tf:"moved_on,omitempty"`

	// (String)
	MovedToOrganization *string `json:"movedToOrganization,omitempty" tf:"moved_to_organization,omitempty"`

	// (String)
	OldAccountURL *string `json:"oldAccountUrl,omitempty" tf:"old_account_url,omitempty"`

	// (String)
	OrganizationName *string `json:"organizationName,omitempty" tf:"organization_name,omitempty"`

	// (String)
	OrganizationOldURL *string `json:"organizationOldUrl,omitempty" tf:"organization_old_url,omitempty"`

	// (String)
	OrganizationOldURLLastUsed *string `json:"organizationOldUrlLastUsed,omitempty" tf:"organization_old_url_last_used,omitempty"`

	// (String)
	OrganizationOldURLSavedOn *string `json:"organizationOldUrlSavedOn,omitempty" tf:"organization_old_url_saved_on,omitempty"`

	// (String)
	OrganizationURLExpirationOn *string `json:"organizationUrlExpirationOn,omitempty" tf:"organization_url_expiration_on,omitempty"`

	// (String) ID of the region group where the account is created. To retrieve the region group ID for existing accounts in your organization, execute the SHOW REGIONS command. For information about when you might need to specify region group, see Region groups.
	RegionGroup *string `json:"regionGroup,omitempty" tf:"region_group,omitempty"`

	// (String)
	RestoredOn *string `json:"restoredOn,omitempty" tf:"restored_on,omitempty"`

	// (String)
	ScheduledDeletionTime *string `json:"scheduledDeletionTime,omitempty" tf:"scheduled_deletion_time,omitempty"`

	// (String)
	SnowflakeRegion *string `json:"snowflakeRegion,omitempty" tf:"snowflake_region,omitempty"`
}

type ShowOutputParameters struct {
}

// AccountSpec defines the desired state of Account
type AccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccountInitParameters `json:"initProvider,omitempty"`
}

// AccountStatus defines the observed state of Account.
type AccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Account is the Schema for the Accounts API. The account resource allows you to create and manage Snowflake accounts. For more information, check account documentation https://docs.snowflake.com/en/user-guide/organizations-manage-accounts.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Account struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.adminNameSecretRef)",message="spec.forProvider.adminNameSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edition) || (has(self.initProvider) && has(self.initProvider.edition))",message="spec.forProvider.edition is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.emailSecretRef)",message="spec.forProvider.emailSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.gracePeriodInDays) || (has(self.initProvider) && has(self.initProvider.gracePeriodInDays))",message="spec.forProvider.gracePeriodInDays is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   AccountSpec   `json:"spec"`
	Status AccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountList contains a list of Accounts
type AccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Account `json:"items"`
}

// Repository type metadata.
var (
	Account_Kind             = "Account"
	Account_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Account_Kind}.String()
	Account_KindAPIVersion   = Account_Kind + "." + CRDGroupVersion.String()
	Account_GroupVersionKind = CRDGroupVersion.WithKind(Account_Kind)
)

func init() {
	SchemeBuilder.Register(&Account{}, &AccountList{})
}
